In Java's regular expressions, '\d' looks for __	digits	
In Java's regular expressions, the '*' looks for __	0 to many occurences of the pattern that precedes it	
In the Matcher class, the group() method __	returns the subsequence matched by the previous match	
In the Matcher class, the start() method returns __	the starting index of the previous match	
A class can implement Serializable even if it's superclass doesn't. T/F	true	
A class can't implement Serializable if it's superclass does not implement Serializable. T/F	false	
When deserializing classes that implement Serializable, constructors are executed. T/F	false	
When deserializing classes that implement Serializable, constructors are NOT executed. T/F	True	
When deserializing Serializable classes where the superclass is NOT Serializable, the non-serializable superclass must run it's constructor. T/F	true	
When deserializing classes that implement Serializable where the superclass is not Serializable, the non-serializable superclass will not run it's constructor. T/F	false. The non-serializable superclass must run it's constructor.	
For the wrapper classes (ex. Integer, Short), the equals() method will return true if __	the primitive types and the values are equal.	
Wrapper objects are immutable. T/F	true	
All of the wrapper classes (except Character) have two constructors. They take a __ of the type being constructed and a __ of the type being constructed.	primitive, a String representation	
The Character wrapper class has only one constructor. It takes a __ argument.	char	
How do you call the valueOf() method of a wrapper class?	valueOf() is a static method that takes a string. Ex. Integer.valueOf("123");	
If we have a String x that is a binary number (base 2), what method of a wrapper class can we use to get the int value?	We use the valueOf() method.&nbsp;<div><br /></div><div>Ex. Integer i = Integer.valueOf(x, 2);<br /></div>	
What family of methods allow you to convert numeric wrapper classes into different primitive numeric types?	xxxValue() methods<br /><br />Ex. Integer i = new Integer(3);<br />byte b = i.byteValue();<div>double d = i.doubleValue();</div>	
What do the xxxValue() (ex. byteValue() ) methods in the numeric wrapper classes do?	Allow you to convert numeric wrapper classes into the primitive numeric type.	
When == is used to compare a primitive to a wrapper, what happens?	The wrapper will be unwrapped and the comparison will be primitive to primitive.	
Reference variables that refer to wrapper objects can be null. T/F	true	
Reference variables that refer to wrapper objects cannot be null. T/F	false	
Some of the wrapper objects will always be == when two of the wrapper objects have the same primitive values. What wrapper objects are they?	Boolean<br />Byte<br />Character from \u0000 to \u007f<br />Short from -128 to 127<div>Integer from -128 to 127</div>	
Given:<br /><br /><code><div align="left">class Driver { }<br />public class Car implements Serializable {<br />&nbsp;&nbsp; &nbsp;private Driver d = new Driver();<br />}<br /><br /></div></code>Is an object of type Car serializable?	An instance of type Car has-a Driver. Driver is not serializable so any attempt to serialize Car will cause a thrown exception so NO.	
Which package do you import to use the File class?	java.io.File	
How do you create new directories with Java?	Create a File object and call mkdir() on it.<br /><br />Ex.<br />File dir = new File("dir");<div>dir.mkdir();</div>	
How do you create a new file in Java?	Create a new File object and call createNewFile() on it.<br /><br />Ex.<br /><br />File file = new File("file");<div>file.createNewFile();</div>	
How do you create a new file inside of a directory using Java?	Create a File object by providing the directory path.<br />Create another File object by providing the File object representing the directory path and then the name of the new file.<br /><br />Ex.<br /><br />File dir = new File("dir1/dir2/dir3"); //assuming this directory exists<div>File file = new File(dir, "file");</div><div>file.createNewFile();</div>	
What package do you import to use the Date class?	java.util.Date	
What package do you import to use the Calendar class?	java.util.Calendar	
What package do you import to use the DateFormat class?	java.text.DateFormat	
What package do you import to use the NumberFormat class?	java.text.NumberFormat	
What package do you import to use the Locale class?	java.util.Locale	
There is only one constructor of the Date class that takes an argument. What does the Date() constructor take?	A long.	
What does an instance of the Date class represent if it was constructed with the no-arg constructor?	The moment in time when the object was construted, or "now".	
How do you create an instance of the Calendar class?	You must use the static factory method getInstance()<br /><br />Ex.<br />Calendar cal = Calendar.getInstance();	
The Calendar class has a setTime() method. What parameter does this method take?	a Date object	
<div align="left"><code><div>class Driver implements Serializable { }</div><div>public class Car implements Serializable {</div><div>&nbsp;&nbsp; &nbsp;private Driver d = new Driver();</div><div>}</div><div><br /></div></code></div><div>Is an object of type Car serializable?</div>	An instance of type Car has-a Driver. Driver is serializable so YES, instances of type Car are serializable.	
How would you call the add() method on an instance of the Calendar class?	Calendar c = Calendar.getInstance();<br /><br />c.add(Calendar.DAY, 1); //Adds one day	
How is the roll() method different than the add() method in the Calendar class?	the roll() method behaves like the add() method, except that larger parts of the Date will not be changed when incrementing or decrementing with roll()	
How do you create a new instance of the DateFormat class?	DateFormat is an abstract class. You must use a static factory method.<br /><br />Ex.<br />DateFormat df = DateFormat.getInstance();	
Given an instance of the DateFormat class, df, and an instance of the Date class, d, how do you use the DateFormat object to format the Date?	df.format(d)	
How many constructors does the Character wrapper class have?	one.<br /><br />It takes a character argument.	
The File class has an exists() method which returns a boolean.&nbsp;When does exists() return true? <br /><br />File f = new File(...);<br />f.exists();	exists() will return true if the referenced file is either a file or a directory and exists on the system.	
The File class has a method called isFile(). When does the isFile() method return true?<br /><br />File f = new File(...);<div>f.isFile();</div>	isFile() returns true if the referenced file is a file that exists and false if it is a directory or does not exist.	
In what context will you use the flush() method?	When using buffered stream writers (not readers). For example, the FileWriter class.<br /><br />Use after writing to the stream but before closing the stream.	
When writing to a stream with a Writer object, when should you use the flush() method?	You should call the flush() method after all of your write operations and before you close() the stream.	
Which Writer class that works with Files has a newLine() method?	the BufferedWriter class	
Which Writer class that works with Files has a println() method?	the PrintWriter class	
There are two ways to create a file. What are they?	1. Call the createNewFile() method on a File object.<br /><br />2. Create a FileWriter, PrintWriter or FileOutputStream. This will automatically create a new file (if it doesn't exist).	
The NumberFormat and DateFormat classes have parse() and format() methods. What do these methods do?	parse() takes a String and returns a Number.<br /><br />format() takes a number and returns a String.	
Will this compile? <br /><br /><br /><code>static void doStuff(int... doArgs) { } </code>	yes	
Will this compile?<br /><br /><br /><code>static void doStuff(int doArgs...) { }</code>	no. Valid vararg parameter syntax is...<br /><br />doStuff(int a, int b, ... , int z, int... doArgs)	
static void doStuff(int... doArgs, int y) { }<div><br /></div><div>Will this compile?</div>	no.&nbsp;Valid vararg parameter syntax is...<br /><br />doStuff(int a, int b, ... , int z, int... doArgs)	
Will this compile?<br /><br /><br /><code>static void doStuff(int x, int... doArgs) { } </code>	yes	
Enums can be declared as their own separate class. T/F	true	
Enums cannot be declared as their own separate class. T/F	false. They can.	
Enums can be declared as a class member. T/F	true	
Enums cannot be declared as a class member. T/F	false	
Enums can be declared within a method. T/F	false. They cannot	
Enums cannot be declared within a method. T/F	true	
A no-arg constructor is always created for a class by the compiler if it doesn't already exist. T/F	False.<br /><br />If a class has constructors (with args) already defined, the compiler will NOT create a no-arg constructor even if no no-arg constructor exists.	
Cohesion is...	Cohesion is the OO principle which states that a class should be designed with a single, well-focused purpose.	
Encapsulation is...	...the OO principle which states that implementation details should be hidden behind a public programming interface.	
Coupling is...	Coupling refers to the degree to which one class knows about another class. OO principle states that one class should only know about another class through it's API.	
Polymorphism is...	Polymorphism is the OO principle which means that a single object can be seen as having many types.	
<div>What is the output of the following?<br /><br /></div><div align="left"><code><div>class A {<br />&nbsp;&nbsp;public static void main(String[] args) {<br />&nbsp;&nbsp; &nbsp;B foo = new C();<br />&nbsp;&nbsp; &nbsp;System.out.println(foo.x + " " + foo.doThing() );<br />&nbsp;&nbsp;}<br />}<br />class B {<br />&nbsp;&nbsp;String x = "b_var";<br />&nbsp;&nbsp;public String doThing() { return "B.doThing()"; }<br />}<br />class C extends B {<br />&nbsp;&nbsp;String x = "c_var";<br />&nbsp;&nbsp;public String doThing() { return "C.doThing()"; }<br />}</div></code></div>	b_var C.doThing()<br /><br />Polymorphism is only for instance methods (not instance variables).	
Polymorphism applies only to instance methods, not instance variables. T/F?	True	
Polymorphism only applies to instance variables, not instance methods. T/F?	False.<br /><br />Polymorphism only applies to instance methods.	
<div>What is the output of the following?</div><div align="left"><br /><code align="left">class A {<br />&nbsp;&nbsp;public static void main(String[] args) {<br />&nbsp;&nbsp; &nbsp;B foo = new C();<br />&nbsp;&nbsp; &nbsp;System.out.println(foo.x + " " + foo.doThing() );<br />&nbsp;&nbsp;}<br />}<br />class B {<br />&nbsp;&nbsp;String x = "b_var";<br />&nbsp;&nbsp;public static String doThing() { return "B.doThing()"; }<br />}<br />class C extends B {<br />&nbsp;&nbsp;String x = "c_var";<br />&nbsp;&nbsp;public static String doThing() { return "C.doThing()"; }<br />}</code></div>	b_var B.doThing()<br /><br /><br />doThing() is a static method.	
Overloaded methods with a var-arg parameter are chosen last. T/F	True	
Overloaded methods with a var-arg parameter are chosen first. T/F	False. Var-arg overloaded methods are chosen last.	
<div>What is the value of result?</div><div align="left"><code><br /></code></div><div align="left"><code>class A { }<br />class Example {</code></div><div align="left"><code>&nbsp;&nbsp;static String result = "";</code></div><div align="left"><code>&nbsp;&nbsp;public static void main(String[] args) {</code></div><div align="left"><code>&nbsp;&nbsp; &nbsp;A[] a = new A[2];</code></div><div align="left"><code>&nbsp;&nbsp; &nbsp;foo(a);</code></div><div align="left"><code>&nbsp;&nbsp;}</code></div><div align="left"><code>&nbsp;&nbsp;static void foo(A[]... a) { result += "1"; }</code></div><div align="left"><code>&nbsp;&nbsp;static void foo(A[] a) &nbsp; &nbsp;{ result += "2"; }</code></div><div align="left"><code>&nbsp;&nbsp;static void foo(Object o) { result += "3"; }</code></div><div align="left"><code>}</code></div>	2	
What is the value of result?<div><br /><code><div align="left">class A { }</div><div align="left">class B extends A { }</div><div align="left">class Example {</div><div align="left">&nbsp;&nbsp;static String result = "";</div><div align="left">&nbsp;&nbsp;public static void main(String[] args) {</div><div align="left">&nbsp;&nbsp; &nbsp;B[] b = new B[2];</div><div align="left">&nbsp;&nbsp; &nbsp;foo(b);</div><div align="left">&nbsp;&nbsp;}</div><div align="left">&nbsp;&nbsp;static void foo(A[]... a) { result += "1"; }</div><div align="left">&nbsp;&nbsp;static void foo(B[]... b) { result += "2"; }&nbsp;</div><div align="left">&nbsp;&nbsp;static void foo(A[] a) &nbsp; &nbsp;{ result += "3"; }&nbsp;&nbsp; &nbsp; &nbsp;</div><div align="left">&nbsp;&nbsp;static void foo(Object o) { result += "4"; }</div><div align="left">}</div></code></div>	3<br /><br />var-arg overloaded methods are chosen last	
What is the value of result?<br /><br /><div align="left"><code><div>class Example {</div><div>&nbsp;&nbsp;static String result = "";</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;int i = 1;</div><div>&nbsp;&nbsp; &nbsp;foo(i);</div><div>&nbsp;&nbsp; &nbsp;System.out.println(result);</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;static void foo(A[]... a) { result += "1"; }</div><div>&nbsp;&nbsp;static void foo(B[]... b) { result += "2"; }</div><div>&nbsp;&nbsp;static void foo(A[] a) { result += "3"; }</div><div>&nbsp;&nbsp;static void foo(Object o) { result += "4"; }</div><div>}</div><div>class A { }</div><div>class B extends A { }</div></code></div>	4	
What is the value of result?<br /><div align="left"><code><div><div>class Example {</div><div>&nbsp;&nbsp;static String result = "";</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;int i = 1;</div><div>&nbsp;&nbsp; &nbsp;foo(i);</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;static void foo(A[]... a) { result += "1"; }</div><div>&nbsp;&nbsp;static void foo(B[]... b) { result += "2"; }</div><div>&nbsp;&nbsp;static void foo(A[] a) { result += "3"; }</div><div>&nbsp;&nbsp;static void foo(Object o) { result += "4"; }</div><div>}</div><div>class A { }</div><div>class B extends A { }</div></div></code></div>	4	
What is the value of result?<br><div align="left"><code><br>class Example {</code></div><div align="left"><code>&nbsp;&nbsp;static String result = "";</code></div><div align="left"><code>&nbsp;&nbsp;public static void main(String[] args) {</code></div><div align="left"><code>&nbsp;&nbsp; &nbsp;A[] a = new A[2];</code></div><div align="left"><code>&nbsp;&nbsp; &nbsp;foo(a);</code></div><div align="left"><code>&nbsp;&nbsp;}</code></div><div align="left"><code>&nbsp;&nbsp;static void foo(A[]... a) { result += "1"; }</code></div><div align="left"><code>&nbsp;&nbsp;static void foo(B[]... b) { result += "2"; }</code></div><div align="left"><code>&nbsp;&nbsp;static void foo(B[] b) { result += "3"; }</code></div><div align="left"><code>&nbsp;&nbsp;static void foo(Object o) { result += "4"; }</code></div><div align="left"><code>}</code></div><div align="left"><code>class A { }</code></div><div align="left"><code>class B extends A { }<br></code></div>	4<br /><br />var-arg overloaded methods are chosen last. Arrays are objects.	
What is the result of this program?<br /><br /><div align="left"><code><div><div><div>class Example {</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(foo(8));</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;static String foo(short s) &nbsp; &nbsp;{ return "1"; }</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;static String foo(short... s) { return "2"; }</div><div>}</div></div></div></code></div>	Compilation error<br /><br />foo() expects a short. The call to foo() provides an int.	
What is the result of this program?<br /><br /><div align="left"><code><div><div><div>class Example {</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(foo((short)8));</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;static String foo(short s) &nbsp; &nbsp;{ return "1"; }</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;static String foo(short... s) { return "2"; }</div><div>}</div></div></div></code></div>	1	
Static init blocks are executed at class loading time. T/F	true	
Static init blocks are executed after the call to super() in a constructor. T/F	false<div><br /></div><div>They are run at class loading time.</div>	
Instance init blocks are executed right after the call to super() in a constructor. T/F	true	
Instance init blocks are executed at class loading time. T/F	false.<div><br /></div><div>They are run after the call to super() in a constructor.</div>	
When multiple init blocks of a single type occur in a class, they run in order, from the top down. T/F	true	
When multiple init blocks of a single type occur in a class, they run in a random order. T/F	false<br /><br />They run in order, from the top down.	
<div>What is the output of the following?</div><div align="left"><code><div><br /></div><div>import static java.lang.System.out;</div><div>class A {</div><div>&nbsp;&nbsp;{ out.print("a1 "); }</div><div>&nbsp;&nbsp;public A() { out.print("a2 "); }</div><div>}</div><div>class B extends A {</div><div>&nbsp;&nbsp;static { out.print("b1 "); }</div><div>&nbsp;&nbsp;public B() { out.print("b2 "); }</div><div>&nbsp;&nbsp;{ out.print("b3 "); }</div><div>&nbsp;&nbsp;static { out.print("b4 "); }</div><div>}</div><div>class Example extends B {&nbsp;</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;out.print("start ");</div><div>&nbsp;&nbsp; &nbsp;new Example();</div><div>&nbsp;&nbsp; &nbsp;out.print("end ");</div><div>&nbsp;&nbsp;}</div><div>}</div><div><br /></div></code></div>	b1 b4 start a1 a2 b3 b2 end&nbsp;<br /><br />Static init blocks are loaded at class loading time. Instance init blocks run right after the call to super() in a constructor.	
What is the output of the following?<br /><br /><code><div align="left"><div>import static java.lang.System.out;</div><div>class A {</div><div>&nbsp;&nbsp;public A() { out.print("a1 "); }</div><div>&nbsp;&nbsp;static { out.print("a2 "); }</div><div>}</div><div>class B extends A {</div><div>&nbsp;&nbsp;{ out.print("b1 "); }</div><div>&nbsp;&nbsp;public B() { out.print("b2 "); }</div><div>&nbsp;&nbsp;static { out.print("b3 "); }</div><div>&nbsp;&nbsp;static { out.print("b4 "); }</div><div>}</div><div>class Example extends B {&nbsp;</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;out.print("start ");</div><div>&nbsp;&nbsp; &nbsp;new Example();</div><div>&nbsp;&nbsp; &nbsp;out.print("end ");</div><div>&nbsp;&nbsp;}</div><div>}</div></div></code>	a2 b3 b4 start a1 b1 b2 end&nbsp;<div><br /></div><div>Static init blocks are loaded at class loading time. Instance init blocks run right after the call to super() in a constructor.</div>	
<div>What is the output of the following?</div><br /><div align="left"><code><div><div>import static java.lang.System.out;</div><div>class A {</div><div>&nbsp;&nbsp;public A() { out.print("a1 "); }</div><div>&nbsp;&nbsp;{ out.print("a2 "); }</div><div>&nbsp;&nbsp;static { out.print("a3 "); }</div><div>}</div><div>class B extends A {</div><div>&nbsp;&nbsp;static { out.print("b1 "); }</div><div>&nbsp;&nbsp;{ out.print("b2 "); }</div><div>&nbsp;&nbsp;public B() { out.print("b3 "); }</div><div>}</div><div>class C extends B {</div><div>&nbsp;&nbsp;static { out.print("c1 "); }</div><div>&nbsp;&nbsp;public C() { out.print("c2 "); }</div><div>&nbsp;&nbsp;{ out.print("c3 "); }</div><div>}</div><div>class Example extends B {&nbsp;</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;out.print("start ");</div><div>&nbsp;&nbsp; &nbsp;new Example();</div><div>&nbsp;&nbsp; &nbsp;out.print("end ");</div><div>&nbsp;&nbsp;}</div><div>}</div></div></code></div>	a3 b1 start a2 a1 b2 b3 end&nbsp;<br /><div><br /></div><div>Static init blocks are loaded at class loading time. Instance init blocks run right after the call to super() in a constructor.</div>	
<div>What is the output of the following?</div><code><div align="left"><div><br /></div><div>public class Example {</div><div>&nbsp;&nbsp;public enum E { ONE, TWO, THREE }</div><div>&nbsp;&nbsp;</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;System.out.println(E.values());</div><div>&nbsp;&nbsp;}</div><div>}<br /></div></div></code>	garbage<br /><br />E.values() returns an array of the values of E. The array reference is what gets printed.	
<div>What is the output of the following?<br /><br /></div><div align="left"><code><div><div>public class Example {</div><div>&nbsp;&nbsp;public enum E {&nbsp;</div><div>&nbsp;&nbsp; &nbsp;ONE(2), TWO(4), THREE(6);</div><div>&nbsp;&nbsp; &nbsp;E(int x) { this.x = x; };</div><div>&nbsp;&nbsp; &nbsp;private int x;</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;System.out.println(E.ONE + " " + E.ONE.x);</div><div>&nbsp;&nbsp;}</div><div>}</div></div></code></div>	ONE 2	
<div>What is the output of the following?</div><div><br /></div><div align="left"><code><div>public class Example {</div><div>&nbsp;&nbsp;public enum E {&nbsp;</div><div>&nbsp;&nbsp; &nbsp;ONE(2), TWO(4), THREE(6) { public int getX(int x) {</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return x * 100;</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } };</div><div>&nbsp;&nbsp; &nbsp;E(int x) { this.x = x; };</div><div>&nbsp;&nbsp; &nbsp;private int x;</div><div>&nbsp;&nbsp; &nbsp;public int getX(int i) { return x * i; }</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;System.out.println(E.THREE.getX(5) + " " + E.TWO.getX(5));</div><div>&nbsp;&nbsp;}</div><div>}</div></code></div>	<div>500 20</div>	
<div>What is the output of the following?</div><div><br /></div><div align="left"><code><div><div><div>public class Example {</div><div>&nbsp;&nbsp;static int x = 8;</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;System.out.println(new Example().foo(x));</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;int foo(int x) {</div><div>&nbsp;&nbsp; &nbsp;int x = 9;</div><div>&nbsp;&nbsp; &nbsp;return x;</div><div>&nbsp;&nbsp;}</div><div>}</div></div></div></code></div>	This code doesn't compile. The variable x declared in the foo() method is already defined (the x parameter passed into the foo() method).	
<div>What is the output of the following?</div><br /><br /><code><div align="left">public class Example {<div>&nbsp;&nbsp;static int x = 8;</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;System.out.println(new Example().foo(x));</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;int foo(int i) {</div><div>&nbsp;&nbsp; &nbsp;int x = 9;</div><div>&nbsp;&nbsp; &nbsp;return x;</div><div>&nbsp;&nbsp;}</div><div>}</div></div></code>	9	
What is the output of the following?<br /><br /><code><div align="left">enum E {</div><div align="left">&nbsp;&nbsp;ONE(2), TWO(4), THREE(6);</div><div align="left">&nbsp;&nbsp;E(int x) { this.x = x; };</div><div align="left">&nbsp;&nbsp;private int x;</div><div align="left">}</div><div align="left">public class Example {</div><div align="left">&nbsp;&nbsp;public static void main(String[] args) {</div><div align="left">&nbsp;&nbsp; &nbsp;System.out.println(E.ONE + " " + E.ONE.x);</div><div align="left">&nbsp;&nbsp;}</div><div align="left">}</div></code>	This program does not compile. x is a private variable in enum E.	
<div>What is the output of the following?<br /><br /><br><div align="left"><code>enum E {&nbsp;<div>&nbsp;&nbsp;ONE(2), TWO(4), THREE(6);</div><div>&nbsp;&nbsp;E(int x) { this.x = x; };</div><div>&nbsp;&nbsp;int x;</div><div>}</div><div>public class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;System.out.println(E.ONE + " " + E.ONE.x);</div><div>&nbsp;&nbsp;}</div><div>}</div></code></div></div>	ONE 2	
How are these two operators similar and different?<br /><br />'&amp;&amp;' and '&amp;'	They are both AND logical operators.<br /><div>They evaluate to TRUE if both operands are TRUE.<br /><br /></div><div>'&amp;&amp;' will short circuit if the first operand is TRUE.<br />'&amp;' will *not* short circuit if the first operand is TRUE. This means that the second operand will always be evaluated.</div>	
How are these two operators similar and different?<br /><br />'||' and '|'	They are both OR operators.<br />They evaluate to TRUE if *either* operand is true.<br /><br />'||' will short circuit if the first operand is TRUE.<div>'|' will *not* short circuit if the first operand is TRUE. This means that the second operand will always be evaluated.</div>	
What does the '^' operator do?	XOR<br />exclusive-or<div><br /></div><div>This operator evaluates to TRUE *iff* exactly one operand is true.</div>	
What is the output of the following?<div><br />&nbsp;<br><div align="left"><code><div>interface i_A { }</div><div>interface i_B { }</div><div>class A implements i_A { }</div><div>class B extends A implements i_B { }</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;String output = "";</div><div>&nbsp;&nbsp; &nbsp;A a = new A();</div><div>&nbsp;&nbsp; &nbsp;A a2 = new B();</div><div>&nbsp;&nbsp; &nbsp;B b = new B();</div><div>&nbsp;&nbsp; &nbsp;if(a &nbsp;instanceof i_A) output+="1";</div><div>&nbsp;&nbsp; &nbsp;if(a2 instanceof i_B) output +="2";</div><div>&nbsp;&nbsp; &nbsp;System.out.println(output);</div><div>&nbsp;&nbsp;}</div><div>}</div></code></div></div>	<div>12</div>	
What is the output of the following?<div><br />&nbsp;<br><div align="left"><code><div>interface i_A { }</div><div>interface i_B { }</div><div>class A implements i_A { }</div><div>class B extends A implements i_B { }</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;String output = "";</div><div>&nbsp;&nbsp; &nbsp;A a = new A();</div><div>&nbsp;&nbsp; &nbsp;A a2 = new B();</div><div>&nbsp;&nbsp; &nbsp;B b = new B();</div><div>&nbsp;&nbsp; &nbsp;if(a2 instanceof i_A) output+="1";</div><div>&nbsp;&nbsp; &nbsp;if(b &nbsp;instanceof i_B) output+="2";</div><div>&nbsp;&nbsp; &nbsp;System.out.println(output);</div><div>&nbsp;&nbsp;}</div><div>}</div></code></div></div>	<div>12</div>	
What is the output of the following?<div><br />&nbsp;<br><div align="left"><code><div>interface i_A { }</div><div>interface i_B { }</div><div>class A implements i_A { }</div><div>class B extends A implements i_B { }</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;String output = "";</div><div>&nbsp;&nbsp; &nbsp;A a = new A();</div><div>&nbsp;&nbsp; &nbsp;A a2 = new B();</div><div>&nbsp;&nbsp; &nbsp;B b = new B();</div><div>&nbsp;&nbsp; &nbsp;if(a instanceof i_A) output+="1";</div><div>&nbsp;&nbsp; &nbsp;if(a instanceof i_B) output+="2";</div><div>&nbsp;&nbsp; &nbsp;System.out.println(output);</div><div>&nbsp;&nbsp;}</div><div>}</div></code></div></div>	<div>1</div>	
What is the output of the following?<div><br />&nbsp;<br><div align="left"><code><div>interface i_A { }</div><div>interface i_B { }</div><div>class A implements i_A { }</div><div>class B extends A implements i_B { }</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;String output = "";</div><div>&nbsp;&nbsp; &nbsp;A a = new A();</div><div>&nbsp;&nbsp; &nbsp;A a2 = new B();</div><div>&nbsp;&nbsp; &nbsp;B b = new B();</div><div>&nbsp;&nbsp; &nbsp;if(a instanceof i_B) output+="1";</div><div>&nbsp;&nbsp; &nbsp;if(b instanceof i_A) output+="2";</div><div>&nbsp;&nbsp; &nbsp;System.out.println(output);</div><div>&nbsp;&nbsp;}</div><div>}</div></code></div></div>	<div>2</div>	
The Java 6 compiler will use 'assert' as a keyword by default. T/F	true	
The Java 6 compiler will not use the 'assert' keyword by default. T/F	false<br /><br />The Java 6 compiler uses the 'assert' keyword by defualt.	
If you want to use 'assert' as an <i>identifier</i>&nbsp;(not a keyword) in your code, you compile using the ___ option.	-source 1.3	
In code where 'assert' is used as a keyword, assertions are disabled by default at runtime. T/F	true	
In code where 'assert' is used as a keyword, assertions are enabled by default at runtime. T/F	false.<br /><br />assertions are disabled by default.	
Complete this command so that assertions are enabled at runtime.<br /><br /><code>java ___ ExampleClass</code>	<code>-ea</code><br /><br />or<div><br /><code>-enableassertions</code></div>	
When compiling old code that uses 'assert' as an identifier with the following command:<br /><br />javac -source 1.3 ExampleClass<br /><br />The compiler will ___	The compiler will issue warnings when it discovers the word 'assert' used as an identifier, but the code will still compile and execute.<br />	
When compiling old code that uses 'assert' as an identifier with the following command:<br /><br />javac -source 1.4 ExampleClass<br /><br />The compiler will ___	The compiler will issue errors when it discovers the word 'assert' used as an identifier.	
<code>Integer.parseInt(...);</code><br /><br />can throw a NumberFormatException. T/F	true	
<code>Integer.parseInt(...);</code><br /><br />throws an IllegalArgumentException. T/F	true<br /><br />IllegalArgmentException is a superclass to NumberFormatException	
Does this compile? Y/N<br /><br /><div align="left"><code>int[] x = {7, 6, 5};<div>for(int y : x) { ... }</div></code></div>	yes	
Does this compile? Y/N<br /><br /><div align="left"><code>int[] x = {7, 6, 5};<div>for(x : int y) { ... }</div></code></div>	no<br /><br />the operands are swapped	
Does this compile? Y/N<br /><br /><div align="left"><code>int[] x = {7, 6, 5};<div>int y = 0; for(y : x) { ... }</div></code></div>	no<br /><br />the enhanced for loop must declare its first operand	
Does this compile? Y/N<br /><br /><div align="left"><code>int[] x = {7, 6, 5};<div>for(int y=0, z=0; z&lt;x.length; z++) { y = x[z]; ... }</div></code></div>	yes	
Does this compile? Y/N<br /><br /><div align="left"><code>int[] x = {7, 6, 5};<div>for(int y=0, int z=0; z&lt;x.length; z++) { y = x[z]; ... }</div></code></div>	no<br /><br />the syntax to create two variables in a for loop is incorrect	
Does this compile? Y/N<br /><br /><div align="left"><code>int[] x = {7, 6, 5};<div>int y =0; for(int z=0; z&lt;x.length; z++) { y = x[z]; ... }</div></code></div>	yes	
An overriding method cannot throw a broader exception than the method it's overriding. T/F	true	
<span style=" font-style: normal; font-weight: normal;">An overriding method cannot throw a narrower exception than the method it's overriding. T/F</span>	false<br /><br />An overriding method cannot throw a broader exception than the method it's overriding	
The 'finally' block always executes when the 'try' block exits. T/F	true	
<span style=" font-style: normal; font-weight: normal;">The 'finally' block only executes when an exception is thrown in the 'try' block. T/F</span>	false<br /><br />'finally' will execute when a 'try' block exits, whether an exception is thrown or not	
If there is a 'return' statement in a 'try' block, the 'finally' block will be skipped and not execute. T/F	false<br /><br />'finally' will execute after the 'return' statement is encountered, but before 'return' executes	
<span style=" font-style: normal; font-weight: normal;">If there is a 'return' statement in a 'try' block, the 'finally' block will execute after the 'return' statement but before 'return' executes. T/F</span>	true	
<span style=" font-style: normal; font-weight: normal;">If an exception is thrown i</span>n a 'try' block, the 'finally' block executes right after the proper 'catch' block completes. T/F	true	
<span style=" font-style: normal; font-weight: normal;"><span style="font-style: normal; font-weight: normal; ">If an exception is thrown i</span>n a 'try' block, the 'finally' block executes right before the proper 'catch' block completes. T/F</span>	false<br /><br />the 'finally' block will execute right after the proper 'catch' block completes	
If you have a 'try' block, it must be followed by a 'catch' block. T/F	false<br /><br />a 'catch' or a 'finally' block must&nbsp;follow the 'try' block.	
<span style=" font-style: normal; font-weight: normal;">If you have a 'try' block, it must be followed by a 'catch' or a 'finally' block. T/F</span>	true	
Will this compile?<br /><br /><div align="left"><code><div>int x;<br />try { ... }</div><div>x = 0;<br />catch (Exception e) { ... }<div>finally { ... }</div></div></code></div>	no<br /><br />a 'catch' block must immediately follow a 'try' block	
<span style=" font-style: normal; font-weight: normal;">Will this compile?<br /><br /><div align="left"><code><div>int x;<br />try { ... }</div><div>catch (Exception e) { ... }</div><div><span style=" font-style: normal; font-weight: normal;">x = 0;</span><br /><div>finally { ... }</div></div></code></div></span>	no<div><br /></div><div>a 'finally' block must immediately follow a 'try' or a 'catch' block</div>	
<span style=" font-style: normal; font-weight: normal;">Will this compile?<br /><br /><div align="left"><code><div>int x;<br />try { ... }</div><div>catch (Exception e) { ... }</div><div><div>finally { ... }</div></div><div><!--anki--><span style=" font-style: normal; font-weight: normal;">x = 0;</span></div></code></div></span>	yes	
<span style=" font-style: normal; font-weight: normal;">Will this compile?<br /><br /><div align="left"><code><div>int x;<br />try { ... }</div><div><span style=" font-style: normal; font-weight: normal;">finally { ... }</span></div><div>catch (Exception e) { ... }</div><div><span style="font-style: normal; font-weight: normal; ">x = 0;</span></div></code></div></span>	no<br /><br />any 'catch' blocks must immediately follow the 'try' block.&nbsp;	
If the JVM exits while a 'try' or 'catch' block is being executed, the finally block may not execute. T/F	true	
<span style=" font-style: normal; font-weight: normal;">If the JVM exits while a 'try' or 'catch' block is being executed, the finally block will still execute. T/F</span>	false<br /><br />if the JVM exits inside of a 'try' or 'catch' block, the finally block is not guaranteed to execute	
If a thread executing a 'try' or 'catch' block is interrupted or killed, the finally block will still execute. T/F	false<br /><br />if a thread executing a 'try' or 'catch' block is interrupted or killed, the finally block is not guaranteed to execute.	
<span style=" font-style: normal; font-weight: normal;">If a thread executing a 'try' or 'catch' block is interrupted or killed, the finally block is not guaranteed to execute. T/F</span>	true	
<div>What does this function return?</div><div><br /></div><div align="left"><code><div>public static int Stupid() {</div><div>&nbsp;&nbsp;try {</div><div>&nbsp;&nbsp; &nbsp;return 0;</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;finally {</div><div>&nbsp;&nbsp; &nbsp;return 1;</div><div>&nbsp;&nbsp;}</div><div>}</div></code></div>	1	
'Exception' is a superclass of 'Error'. T/F	false<div><br /></div><div>it is not</div>	
'Error' is a superclass of 'Exception'. T/F	<div>false</div><div><br /></div>it is not	
<span style=" font-style: normal; font-weight: normal;">'Exception' is a subclass of 'Error'. T/F</span>	false<div><br /></div><div>it is not</div>	
<span style=" font-style: normal; font-weight: normal;">'Error' is a subclass of 'Exception'. T/F</span>	false<div><br /></div><div><span style=" font-style: normal; font-weight: normal;">it is not</span></div>	
<div><br><div>What does this function return?</div><br><div align="left"><code><br><div><br /></div><br><div>public static int Stupid() {</div><br><div>&nbsp;&nbsp;try {</div><br><div>&nbsp;&nbsp;&nbsp;System.exit(0);</div><br><div>&nbsp;&nbsp;}</div><br><div>&nbsp;&nbsp;finally {</div><br><div>&nbsp;&nbsp; &nbsp;return 1;</div><br><div>&nbsp;&nbsp;}</div><br><div>}</div><br></code></div><br></div>	This function does not return anything. The JVM is shut down before the 'return' statement executes.	
'Error' is a subclass of 'Throwable'. T/F	true	
<span style=" font-style: normal; font-weight: normal;">'Exception' is a subclass of 'Throwable'. T/F</span>	true	
<div>Does this compile?</div><div><br /></div><div align="left"><code><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;int i = 1;</div><div>&nbsp;&nbsp; &nbsp;assert(i &gt; 0);</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;static void go() { }</div><div>}</div></code></div>	yes	
<div>Does this compile?</div><div><br /></div><div align="left"><code><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;int i = 1;</div><div>&nbsp;&nbsp; &nbsp;assert(i &gt; 0): "hi";</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;static void go() { }</div><div>}</div></code></div>	yes	
<div>Does this compile?</div><div><br /></div><div align="left"><code><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;int i = 1;</div><div>&nbsp;&nbsp; &nbsp;assert(i &gt; 0): i=2;</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;static void go() { }</div><div>}</div></code></div>	yes	
<div>Does this compile?</div><div><br /></div><div align="left"><code><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;int i = 1;</div><div>&nbsp;&nbsp; &nbsp;assert(i &gt; 0): go();</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;static void go() { }</div><div>}</div></code></div>	no<br /><br />When an 'assert' has two expressions, the second expression must return a value.	
<div>Does this compile?</div><div><br /></div><div align="left"><code><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;int i = 1;</div><div>&nbsp;&nbsp; &nbsp;assert(i &gt; 0): new Example();</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;static void go() { }</div><div>}</div></code></div>	yes	
What package must be imported to throw an 'IOException'?	java.io	
An overriding method can throw RuntimeExceptions not thrown by the overridden method. T/F	true	
<span style=" font-style: normal; font-weight: normal;">An overriding method cannot throw RuntimeExceptions not thrown by the overridden method. T/F</span>	false<div><br /></div><div>An overridding method can throw RuntimeExceptions not thrown by the overridden method</div>	
All collections in the Collections Framework implement the Collection interface. T/F	false<br /><br />none of the Map-related classes and interfaces extend from the Collection interface	
<span style=" font-style: normal; font-weight: normal;">Not all collections in the Collections Framework implement the Collection interface. T/F</span>	true	
A collection ordered by insertion, access or index is not always considered a sorted collection. T/F	true	
<span style=" font-style: normal; font-weight: normal;">A collection ordered by insertion, access or index is always considered a sorted collection. T/F</span>	false<div><br /></div><div>insertion, access or index order is not a sort order.</div>	
<div>What is the type of what is returned from the indicated line of code below?<br /><br /></div><div align="left"><code><div>import java.util.ArrayList;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;ArrayList l = new ArrayList();</div><div>&nbsp;&nbsp; &nbsp;int x = 8;</div><div>&nbsp;&nbsp; &nbsp;l.add(0, x);</div><div>&nbsp;&nbsp; &nbsp;l.get(0); // this line here</div><div>&nbsp;&nbsp;}</div><div>}</div></code></div>	Integer<br /><br />not int because collections cannot hold primitives. The int is autoboxed to an Integer in the 'add' method.<br />	
A method that overrides the 'equals' method must take an argument of type Object. T/F	true	
<span style=" font-style: normal; font-weight: normal;">A method that overrides the 'equals' method must take an argument of type that is the same as the object being compared to. T/F</span>	false<br /><br />A method that overrides the 'equals' method must take an argument of type Object.	
A method that overrides the 'compareTo' method must take an argument of type Object. T/F	false<br /><br />A method that overrides the 'compareTo'' method should take an argument of type that is the same as the object being compared to.	
<span style=" font-style: normal; font-weight: normal;">A method that overrides the 'compareTo' method must take an argument of type that is the same as the object being compared to. T/F</span>	true<br />	
If you have a custom object and you want objects of your class to be keys for a hastable (to create an identical object and use it to search), you must ...	override 'equals' so that two different instances can be considered the same.	
The four types of Collections are ...	Lists, Sets, Maps and Queues	
A Collection can be sorted but unordered. T/F	false<br /><br />sorted order is specific type of ordering	
<span style=" font-style: normal; font-weight: normal;">A Collection can never be sorted but unordered. T/F</span>	true	
When a collection is ordered, it means ...	you can iterate through the collection in a specific (not-random) order.	
When a Collection is sorted, it means ...	the order is determined according to some rule or rules (sort order).	
Will this line of code compile?<br /><br /><code>List&lt;List&lt;Integer&gt;&gt; t = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</code>	no.<br /><br />The type argument <code>&lt;List&lt;Integer&gt;&gt;</code> must be the same for both sides of the assignment, even though the constructor <code>new ArrayList()</code> on the right side is a subtype of the declared List on the left.	
<span style=" font-style: normal; font-weight: normal;">Will this line of code compile?<br /><br /><code>List&lt;List&lt;Integer&gt;&gt; t = new ArrayList&lt;List&lt;Integer&gt;&gt;();</code></span>	yes	
Given two instances of the same class where equals() and hashcode() are properly overriden,<br /><br />If comparing the two objects with equals() returns true, then the objects must have the same hashcode. T/F	true	
<span style=" font-style: normal; font-weight: normal;">Given two instances of the same class where equals() and hashcode() are properly overriden,<br /><br />If comparing the two objects with equals() returns false, then the objects will not have the same hashcode. T/F</span>	false<br /><br />Two objects that do not equals() may have the same hashcode.	
<span style=" font-style: normal; font-weight: normal;">Given two instances of the same class where equals() and hashcode() are properly overriden,<br /><br />If comparing the two objects with equals() returns false, then the objects may have the same hashcode. T/F</span>	true	
<span style=" font-style: normal; font-weight: normal;">Given two instances of the same class where equals() and hashcode() are properly overriden,<br /><br />If comparing the two objects with equals() returns true, then the objects may have the same hashcode. T/F</span>	false<br /><br />if two objects equals() true, they MUST have the same hashcode.	
<span style=" font-style: normal; font-weight: normal;">Given two instances of the same class where equals() and hashcode() are properly overriden,<br /><br />If comparing the two objects with hashcode() returns true, then comparing the objects with equals() must return true. T/F</span>	false<div><br /></div><div>If the hashcodes of two objects are equal, comparing the objects with equals() may return true.</div>	
<span style=" font-style: normal; font-weight: normal;">Given two instances of the same class where equals() and hashcode() are properly overriden,<br /><br />If comparing the two objects with hashcode() returns true, then comparing the objects with equals() may return true. T/F</span>	true	
<span style=" font-style: normal; font-weight: normal;">Given two instances of the same class where equals() and hashcode() are properly overriden,<br /><br />If comparing the two objects with hashcode() returns false, then comparing the objects with equals() may return true. T/F</span>	false<div><br /></div><div>if the hashcodes are not equal, the objects can not be equal.</div>	
<span style=" font-style: normal; font-weight: normal;">Given two instances of the same class where equals() and hashcode() are properly overriden,<br /><br />If comparing the two objects with hashcode() returns false, then comparing the objects with equals() will return false. T/F</span>	true	
What will this function do?<div>&nbsp;&nbsp;<code><div align="left"><div>public static void foo() {</div><div>&nbsp;&nbsp;Set set = new TreeSet();</div><div>&nbsp;&nbsp;set.add("2");</div><div>&nbsp;&nbsp;set.add(3);</div><div>&nbsp;&nbsp;set.add("1");</div><div>&nbsp;&nbsp;Iterator it = set.iterator();</div><div>&nbsp;&nbsp;while(it.hasNext())</div><div>&nbsp;&nbsp; &nbsp;System.out.print(it.next() + " ");</div><div>}</div></div></code></div>	This function will throw a ClassCastException at runtime.<br /><br />You cannot put Strings and ints into the same TreeSet, and the set will throw the exception when comparing the String and an int. Without generics, the compiler can not know this at compile time.	
<span style=" font-style: normal; font-weight: normal;">What will this function do?<div>&nbsp;&nbsp;<code><div align="left"><div>public static void foo() {</div><div>&nbsp;&nbsp;Set set = new TreeSet();</div><div>&nbsp;&nbsp;set.add("2");</div><div>&nbsp;&nbsp;set.add("3");</div><div>&nbsp;&nbsp;set.add("1");</div><div>&nbsp;&nbsp;Iterator it = set.iterator();</div><div>&nbsp;&nbsp;while(it.hasNext())</div><div>&nbsp;&nbsp; &nbsp;System.out.print(it.next() + " ");</div><div>}</div></div></code></div></span>	print "1 2 3"	
<span style=" font-style: normal; font-weight: normal;">What will this function do?<div>&nbsp;&nbsp;<code><div align="left"><div>public static void foo() {</div><div>&nbsp;&nbsp;Set set = new TreeSet();</div><div>&nbsp;&nbsp;set.add("b");</div><div>&nbsp;&nbsp;set.add("d");</div><div>&nbsp;&nbsp;set.add("c");</div><div>&nbsp;&nbsp;Iterator it = set.iterator();</div><div>&nbsp;&nbsp;while(it.hasNext())</div><div>&nbsp;&nbsp; &nbsp;System.out.print(it.next() + " ");</div><div>}</div></div></code></div></span>	print "b c d"	
<div><span style=" font-style: normal; font-weight: normal;">What will this function do?<div>&nbsp;&nbsp;<code><div align="left"><div>public static void foo() {</div><div>&nbsp;&nbsp;Set set = new TreeSet();</div><div>&nbsp;&nbsp;set.add("b");</div><div>&nbsp;&nbsp;set.add("d");</div><div>&nbsp;&nbsp;set.add('c');</div><div>&nbsp;&nbsp;Iterator it = set.iterator();</div><div>&nbsp;&nbsp;while(it.hasNext())</div><div>&nbsp;&nbsp; &nbsp;System.out.print(it.next() + " ");</div><div>}</div></div></code></div></span></div>	<span style=" font-style: normal; font-weight: normal;">This function will throw a ClassCastException at runtime.<br /><br />You cannot put Strings and chars into the same TreeSet, and the set will throw the exception when comparing the String and a char. Without generics, the compiler can not know this at compile time.</span>	
A TreeSet is different from a regular Set because...	a TreeSet is sorted	
Of all the Collections classes, a Map cares about...	unique identifiers	
Maps rely on the ___ method to determine whether two keys are the same or different.	equals()	
<span style=" font-style: normal; font-weight: normal;">Of all the Collections classes, a List cares about...</span>	the index	
Of all the Collections classes, a Set cares about...	uniqueness.	
A HashMap is a Map that is...	unsorted and unordered.	
In a Map, an object's ___ is used as it's key.	hashcode()	
A Hashtable is a Map that is...	unsorted and unordered, like a HashMap, but synchronized.	
Hashmap allows ___ null key(s) and ___ null values in a collection.	one,&nbsp;multiple	
Hashtable<span style=" font-style: normal; font-weight: normal;">&nbsp;allows ___ null key(s) and ___ null values in a collection.</span>	zero, zero	
A Hashtable lets you have null values.	false	
<span style=" font-style: normal; font-weight: normal;">A Hashtable does not let you have null values. T/F</span>	true	
A LinkedHashMap is a Map that...	maintains insertion order.	
A TreeMap is a Map that...	is a sorted map.	
How do you construct a TreeMap with a custom sort order? (2 ways)	define a custom Comparator class and supply it to a TreeMap constructor: new TreeMap(Comparator c)<br /><br /><div>or</div><div><br /></div><div>define the class of objects to be put in the TreeMap to implement the Comparable interface</div>	
What is the output of the following?<div><br /><div align="left"><code><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Map&lt;Foo, String&gt; m = new HashMap&lt;Foo, String&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f1 = new Foo("1");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f2 = new Foo("2");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f3 = new Foo("2");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f1, "aaa");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f2, "bbb");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f3, "bbb");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(m.size());</div><div>&nbsp;&nbsp;}</div><div>}</div><div>class Foo{</div><div>&nbsp;&nbsp;String f;</div><div>&nbsp;&nbsp;Foo(String f) { this.f = f; }</div><div>&nbsp;&nbsp;public boolean equals(Object o) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return ((Foo)o).f == this.f;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></code></div></div>	3	
What is the output of the following?<div><br /><br><div align="left"><code><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Map&lt;Foo, String&gt; m = new HashMap&lt;Foo, String&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f1 = new Foo("1");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f2 = new Foo("2");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f3 = new Foo("4");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f1, "aaa");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f2, "bbb");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f3, "ccc");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(m.size());</div><div>&nbsp;&nbsp;}</div><div>}</div><div>class Foo{</div><div>&nbsp;&nbsp;String f;</div><div>&nbsp;&nbsp;Foo(String f) { this.f = f; }</div><div>&nbsp;&nbsp;public boolean equals(Object o) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return ((Foo)o).f == this.f;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></code></div></div>	3	
What is the output of the follwing?<div><br /><div align="left"><code><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Map&lt;Foo, String&gt; m = new HashMap&lt;Foo, String&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f1 = new Foo("1");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f2 = new Foo("2");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f3 = new Foo("3");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f1, "aaa");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f1, "bbb");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f3, "ccc");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(m.size());</div><div>&nbsp;&nbsp;}</div><div>}</div><div>class Foo{</div><div>&nbsp;&nbsp;String f;</div><div>&nbsp;&nbsp;Foo(String f) { this.f = f; }</div><div>&nbsp;&nbsp;public boolean equals(Object o) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return ((Foo)o).f == this.f;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></code></div></div>	2	
What is the output of the following?<br /><br /><div align="left"><code><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Map&lt;Foo, String&gt; m = new HashMap&lt;Foo, String&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f1 = new Foo("1");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f2 = new Foo("1");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f3 = new Foo("3");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f1, "aaa");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f2, "bbb");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f3, "ccc");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(m.size());</div><div>&nbsp;&nbsp;}</div><div>}</div><div>class Foo{</div><div>&nbsp;&nbsp;String f;</div><div>&nbsp;&nbsp;Foo(String f) { this.f = f; }</div><div>&nbsp;&nbsp;public boolean equals(Object o) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return ((Foo)o).f == this.f;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>}</div></code></div>	3	
<span style=" font-style: normal; font-weight: normal;">What is the output of the following?<br /><br /><div align="left"><code><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;Map&lt;Foo, String&gt; m = new HashMap&lt;Foo, String&gt;();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;Foo f1 = new Foo("1");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f2 = new Foo("1");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f3 = new Foo("3");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f1, "aaa");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f2, "bbb");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f3, "ccc");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(m.size());</div><div>&nbsp;&nbsp;}</div><div>}</div><div>class Foo{</div><div>&nbsp;&nbsp;String f;</div><div>&nbsp;&nbsp;Foo(String f) { this.f = f; }</div><div>&nbsp;&nbsp;public boolean equals(Object o) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;return ((Foo)o).f == this.f;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>&nbsp;&nbsp;public int hashCode() { return 9; }</div><div>}</div></div></code></div></span>	2	
<span style=" font-style: normal; font-weight: normal;">What is the output of the following?<div><br /><div align="left"><code><div><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Map&lt;Foo, String&gt; m = new HashMap&lt;Foo, String&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f1 = new Foo("1");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f2 = new Foo("2");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f3 = new Foo("2");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f1, "aaa");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f2, "bbb");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>m.put(f3, "bbb");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(m.size());</div><div>&nbsp;&nbsp;}</div><div>}</div><div>class Foo{</div><div>&nbsp;&nbsp;String f;</div><div>&nbsp;&nbsp;Foo(String f) { this.f = f; }</div><div>&nbsp;&nbsp;public boolean equals(Object o) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return ((Foo)o).f == this.f;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;&nbsp;public int hashCode() { return 9; }</div><div>}</div></div></div></code></div></div></span>	2	
Does this compile?<div><br /></div><br><div align="left"><code><div><div>interface Hungry&lt;E&gt; { void munch(E x); }</div><div>interface Herbivore&lt;E extends Plant&gt; extends Hungry&lt;E&gt; {}</div><div>abstract class Plant {}</div><div>class Grass extends Plant {}</div><div>abstract class Animal {}</div><div>class Sheep extends Animal implements Herbivore&lt;Sheep&gt; {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public void munch(Sheep x) {}</div><div>}</div></div></code></div>	no. T<span style=" font-style: normal; font-weight: normal;">he type argument 'Sheep' is not within bounds of the type-variable E.</span><br /><br /><div><br />change the type argument in the Sheep class declaration from 'Sheep' to 'Grass' and the Sheep should 'munch' on 'Grass'.<br /><br />OR<div><br /></div><div>change the Herbivore interface type-variable from 'Plant' to 'Animal'.</div></div>	
<span style=" font-style: normal; font-weight: normal;">Does this compile?<div><br /></div><div align="left"><code><div><div><div>interface Hungry&lt;E&gt; { void munch(E x); }</div><div>interface Herbivore&lt;E extends Plant&gt; extends Hungry&lt;E&gt; {}</div><div>abstract class Plant {}</div><div>class Grass extends Plant {}</div><div>abstract class Animal {}</div><div>class Sheep extends Animal implements Herbivore&lt;Grass&gt; {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public void munch(Grass x) {}</div><div>}</div></div></div></code></div></span>	yes	
<span style=" font-style: normal; font-weight: normal;">Does this compile?<div><br /></div><div align="left"><code><div><div><div><div>interface Hungry&lt;E&gt; { void munch(E x); }</div><div>interface Herbivore&lt;E extends Animal&gt; extends Hungry&lt;E&gt; {}</div><div>abstract class Plant {}</div><div>class Grass extends Plant {}</div><div>abstract class Animal {}</div><div>class Sheep extends Animal implements Herbivore&lt;Sheep&gt; {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public void munch(Sheep x) {}</div><div>}</div></div></div></div></code></div></span>	yes	
A Vector is a List that...	is the same as an ArrayList but the methods are synchronized.	
A LinkedList is a List that...	has the elements doubly-linked to one another.<div><br /></div><div>LinkedList also has new methods for adding and removing from the beginning or end.</div>	
A HashSet is a Set that...	is unsorted and unordered.	
A Set uses an object's ___ method to determine whether two objects are identical.	equals()	
A LinkedHashSet is a Set that...	is a version of HashSet that maintains insertion-order and where all elements are doubly-linked to one another.	
A TreeSet is a Set that...	is sorted.	
Given a method,<div><br /></div><code>public static &lt;E extends Number&gt; List&lt;E&gt; process(List&lt;E&gt; nums)</code><div><br /></div><div>Will the code segment below compile?</div><div><br /></div><code><div>ArrayList&lt;Integer&gt; input = null;</div><div>List&lt;Integer&gt; output = null;</div><div>output = process(input);</div></code>	yes	
<span style=" font-style: normal; font-weight: normal;">Given a method,<div><br /></div><code>public static &lt;E extends Number&gt; List&lt;E&gt; process(List&lt;E&gt; nums)</code><div><br /></div><div>Will the code segment below compile?</div><div><br /></div><code><div>List&lt;Number&gt; input = null;</div><div>List&lt;<span style=" font-style: normal; font-weight: normal;">Number</span>&gt; output = null;</div><div>output = process(input);</div></code></span>	yes	
<span style=" font-style: normal; font-weight: normal;">Given a method,<div><br /></div><code>public static &lt;E extends Number&gt; List&lt;E&gt; process(List&lt;E&gt; nums)</code><div><br /></div><div>Will the code segment below compile?</div><div><br /></div><code><div>List&lt;Integer&gt; input = null;</div><div>List&lt;<span style=" font-style: normal; font-weight: normal;">Integer</span>&gt; output = null;</div><div>output = process(input);</div></code></span>	yes	
<span style=" font-style: normal; font-weight: normal;">Given a method,<div><br /></div><code>public static &lt;E extends Number&gt; List&lt;E&gt; process(List&lt;E&gt; nums)</code><div><br /></div><div>Will the code segment below compile?</div><div><br /></div><code><div>ArrayList&lt;Integer&gt; input = null;</div><div><span style=" font-style: normal; font-weight: normal;">ArrayList</span>&lt;<span style="font-style: normal; font-weight: normal; ">Integer</span>&gt; output = null;</div><div>output = process(input);</div></code></span>	no<div><br /></div><div>the return type of process is declared as a List.</div>	
<span style=" font-style: normal; font-weight: normal;">Given a method,<div><br /></div><code>public static &lt;E extends Number&gt; List&lt;E&gt; process(List&lt;E&gt; nums)</code><div><br /></div><div>Will the code segment below compile?</div><div><br /></div><div><code><div>ArrayList&lt;Integer&gt; input = null;</div><div>List&lt;<span style="font-style: normal; font-weight: normal; ">Number</span>&gt; output = null;</div><div>output = process(input);</div></code></div></span>	no<div><br /></div><div>the return type is List&lt;Integer&gt; which can't be assigned to a variable of type List&lt;Number&gt;.</div>	
<span style=" font-style: normal; font-weight: normal;">Given a method,<div><br /></div><code>public static &lt;E extends Number&gt; List&lt;E&gt; process(List&lt;E&gt; nums)</code><div><br /></div><div>Will the code segment below compile?</div><div><br /></div><code><div>List&lt;Number&gt; input = null;</div><div>ArrayList&lt;<span style="font-style: normal; font-weight: normal; ">Integer</span>&gt; output = null;</div><div>output = process(input);</div></code></span>	no<div><br /></div><div>The return type of process is declared as a List</div>	
What does the poll() method in the PriorityQueue class do?	it returns the highest priority entry in the queue AND removes that entry from the queue.	
<span style=" font-style: normal; font-weight: normal;">What does the peek() method in the PriorityQueue class do?</span>	returns the highest priority element in the queue without removing it	
What does the offer() method in the PriorityQueue class do?	add an element to the queue	
In the TreeSet class,<div><br /></div><div>what does the <code>ceiling(e)</code> method do?</div>	returns the lowest element greater or equal to e	
<span style=" font-style: normal; font-weight: normal;">In the TreeSet class,<div><br /></div><div>what does the&nbsp;<code>higher(e)</code>&nbsp;method do?</div></span>	returns the lowest element greater than e	
<div><span style=" font-style: normal; font-weight: normal;">In the TreeSet class,<div><br /></div><div>what does the&nbsp;<code>floor(e)</code>&nbsp;method do?</div></span></div>	returns the highest element less than or equal to e	
<div><span style=" font-style: normal; font-weight: normal;">In the TreeSet class,<div><br /></div><div>what does the&nbsp;<code>lower(e)</code>&nbsp;method do?</div></span></div>	returns the highest element less than e	
<span style=" font-style: normal; font-weight: normal;">In the TreeSet class,<div><br /></div><div>what does the&nbsp;<code>pollFirst()</code>&nbsp;method do?</div></span>	returns and removes the first entry	
<div><span style=" font-style: normal; font-weight: normal;">In the TreeSet class,<div><br /></div><div>what does the&nbsp;<code>pollLast()</code>&nbsp;method do?</div></span></div>	returns and removes the last entry	
<span style=" font-style: normal; font-weight: normal;">In the TreeSet class,<div><br /></div><div>what does the&nbsp;<code>descendingSet()</code>&nbsp;method do?</div></span>	returns a NavigableSet in reverse order	
<span style=" font-style: normal; font-weight: normal;">In the TreeMap class,<div><br /></div><div>what does the&nbsp;<code>ceilingKey(key)</code>&nbsp;method do?</div></span>	returns the lowest key greater than or equal to the given key	
<div><span style=" font-style: normal; font-weight: normal;">In the TreeMap class,<div><br /></div><div>what does the&nbsp;<code>higherKey(key)</code>&nbsp;method do?</div></span></div>	returns the lowest key greater than the given key	
<span style=" font-style: normal; font-weight: normal;">In the TreeMap class,<div><br /></div><div>what does the&nbsp;<code>floorKey(key)</code>&nbsp;method do?</div></span>	returns the highest key less than or equal to the given key	
<span style=" font-style: normal; font-weight: normal;">In the TreeMap class,<div><br /></div><div>what does the&nbsp;<code>lowerKey(key)</code>&nbsp;method do?</div></span>	returns the highest key less than the given key	
<span style=" font-style: normal; font-weight: normal;">In the TreeMap class,<div><br /></div><div>what does the&nbsp;<code>pollFirstEntry()</code>&nbsp;method do?</div></span>	returns and removes the first key-value pair	
<span style=" font-style: normal; font-weight: normal;">In the TreeMap class,<div><br /></div><div>what does the&nbsp;<code>pollLastEntry()</code>&nbsp;method do?</div></span>	returns and removes the last key-value pair	
<span style=" font-style: normal; font-weight: normal;">In the TreeMap class,<div><br /></div><div>what does the&nbsp;<code>descendingMap()</code>&nbsp;method do?</div></span>	returns a NavigableMap in reverse order	
Elements of a Set must in some way implement the Comparable interface. T/F	false	
<span style=" font-style: normal; font-weight: normal;">Elements of a TreeSet must in some way implement the Comparable interface. T/F</span>	true	
Elements of a LinkedHashSet must in some way implement the Comparable interface. T/F	false	
What is the output of the following?<div><br /></div><div align="left"><code><div><div>import java.util.*;</div><div>public class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;Object o = new Object();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>TreeSet s = new TreeSet();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;s.add("o");</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;s.add(o);</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;System.out.println(s.size());</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>}</div></div></code></div>	a ClassCastException is thrown.<br /><br />Objects added to a TreeSet must implement the Comparable interface.	
<div>What is the output of the following?</div><div><br /></div><br><div align="left"><code><div>import java.util.*;</div><div>class Foo {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>int x;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public Foo(int x) { this.x = x; }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public boolean equals(Object o) {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;System.out.println("Foo "+ x + " equals " + ((Foo)o).x);</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;return this.x == ((Foo)o).x;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public int hashCode() {&nbsp;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;System.out.println("Foo " + x + " hashCode");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return x;&nbsp;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div><div>class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>LinkedHashSet&lt;Foo&gt; l = new LinkedHashSet&lt;Foo&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(new Foo(1));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(new Foo(2));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(new Foo(1));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("size is " + l.size());</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></code></div>	<div>Foo 1 hashCode</div><div>Foo 2 hashCode</div><div>Foo 1 hashCode</div><div>Foo 1 equals 1</div><div>size is 2</div>	
<span style=" font-style: normal; font-weight: normal;"><div>What is the output of the following?</div><div><br /></div><div align="left"><code><div><div>import java.util.*;</div><div>class Foo {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;int x;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public Foo(int x) { this.x = x; }</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public boolean equals(Object o) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("Foo "+ x + " equals " + ((Foo)o).x);</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;return this.x == ((Foo)o).x;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public int hashCode() {&nbsp;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;System.out.println("Foo " + x + " hashCode");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return x;&nbsp;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;LinkedHashSet&lt;Foo&gt; l = new LinkedHashSet&lt;Foo&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(new Foo(1));</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;l.add(new Foo(2));</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;l.add(new Foo(3));</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;System.out.println("size is " + l.size());</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>}</div></div></code></div></span>	<div>Foo 1 hashCode</div><div>Foo 2 hashCode</div><div>Foo 3 hashCode</div><div>size is 3</div>	
<span style=" font-style: normal; font-weight: normal;"><div>What is the output of the following?</div><div><br /></div><div align="left"><code><div><div><div>import java.util.*;</div><div>class Foo {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>int x;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public Foo(int x) { this.x = x; }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public boolean equals(Object o) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("Foo "+ x + " equals " + ((Foo)o).x);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return this.x == ((Foo)o).x;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div><div>class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>LinkedHashSet&lt;Foo&gt; l = new LinkedHashSet&lt;Foo&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(new Foo(1));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(new Foo(3));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(new Foo(3));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("size is " + l.size());</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></code></div></span>	<div>size is 3</div>	
<span style=" font-style: normal; font-weight: normal;"><div>What is the output of the following?</div><div><br /></div><div align="left"><code><div><div><div><div>import java.util.*;</div><div>class Foo {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>int x;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public Foo(int x) { this.x = x; }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public boolean equals(Object o) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("Foo "+ x + " equals " + ((Foo)o).x);</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;return this.x == ((Foo)o).x;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public int hashCode() {&nbsp;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp; System.out.println("Foo " + x + " hashCode");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return x;&nbsp;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div><div>class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp; LinkedHashSet&lt;Foo&gt; l = new LinkedHashSet&lt;Foo&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(new Foo(1));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(new Foo(3));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(new Foo(3));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("size is " + l.size());</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></div></code></div></span>	<div>Foo 1 hashCode</div><div>Foo 3 hashCode</div><div>Foo 3 hashCode</div><div>Foo 3 equals 3</div><div>size is 2</div>	
<span style=" font-style: normal; font-weight: normal;"><div>What is the output of the following?</div><div><br /></div><div align="left"><code><div><div><div><div>import java.util.*;</div><div>class Foo {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;int x;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public Foo(int x) { this.x = x; }</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public int hashCode() {&nbsp;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("Foo " + x + " hashCode");</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;return x;&nbsp;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div><div>class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp; LinkedHashSet&lt;Foo&gt; l = new LinkedHashSet&lt;Foo&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(new Foo(1));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(new Foo(3));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(new Foo(3));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("size is " + l.size());</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></div></code></div></span>	<div>Foo 1 hashCode</div><div>Foo 3 hashCode</div><div>Foo 3 hashCode</div><div>size is 3</div>	
<span style=" font-style: normal; font-weight: normal;"><div>What is the output of the following?</div><div><br /></div><div align="left"><code><div><div><div><div>import java.util.*;</div><div>class Dog {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>int size;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Dog(int s) { size = s; }</div><div>}</div><div>class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp; Set&lt;Dog&gt; d = new LinkedHashSet&lt;Dog&gt;();</div><div><span class="Apple-tab-span" style="white-space:pre"></span></div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Set&lt;Integer&gt; i = new LinkedHashSet&lt;Integer&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>d.add(new Dog(1)); d.add(new Dog(2)); d.add(new Dog(1));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>i.add(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.add(1);&nbsp;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(d.size() + " " + i.size());</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></div></code></div></span>	3 2	
<span style=" font-style: normal; font-weight: normal;"><div>What is the output of the following?</div><div><br /></div><div align="left"><code><div><div><div><div>import java.util.*;</div><div>class Dog {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;int size;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Dog(int s) { size = s; }</div><div>}</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;Set&lt;Dog&gt; d = new HashSet&lt;Dog&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Set&lt;Integer&gt; i = new HashSet&lt;Integer&gt;();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;d.add(new Dog(1)); d.add(new Dog(2)); d.add(new Dog(1));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>i.add(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.add(1);&nbsp;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;System.out.println(d.size() + " " + i.size());</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></div></code></div></span>	3 2	
<span style=" font-style: normal; font-weight: normal;"><div>What is the output of the following?</div><div><br /></div><div align="left"><code><div><div><div><div>import java.util.*;</div><div>class Dog {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>int size;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Dog(int s) { size = s; }</div><div>}</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;Set&lt;Dog&gt; d = new TreeSet&lt;Dog&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Set&lt;Integer&gt; i = new TreeSet&lt;Integer&gt;();</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;d.add(new Dog(1)); d.add(new Dog(2)); d.add(new Dog(1));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>i.add(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.add(1);&nbsp;</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;System.out.println(d.size() + " " + i.size());</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>}</div></div></div></div></code></div></span>	a RuntimeException is thrown<div><br /></div><div>Dog cannot be cast to Comparable</div>	
<span style=" font-style: normal; font-weight: normal;"><div>What is the output of the following?</div><div><br /></div><div align="left"><code><div><div><div><div><div>import java.util.*;</div><div>class Dog implements Comparable {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>int size;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Dog(int s) { size = s; }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public int compareTo(Object d) { return this.size - ((Dog)d).size; }</div><div>}</div><div>class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;Set&lt;Dog&gt; d = new TreeSet&lt;Dog&gt;();</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;Set&lt;Integer&gt; i = new TreeSet&lt;Integer&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>d.add(new Dog(1)); d.add(new Dog(2)); d.add(new Dog(1));</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;i.add(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.add(1);&nbsp;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(d.size() + " " + i.size());</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>}</div></div></div></div></div></code></div></span>	2 2	
<span style=" font-style: normal; font-weight: normal;"><div>What is the output of the following?</div><div><br /></div><div align="left"><code><div><div><div><div><div>import java.util.*;</div><div>class Dog implements Comparable {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;int size;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Dog(int s) { size = s; }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public int compareTo(Object d) { return this.size - ((Dog)d).size; }</div><div>}</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Set&lt;Dog&gt; d = new HashSet&lt;Dog&gt;();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;Set&lt;Integer&gt; i = new HashSet&lt;Integer&gt;();</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;d.add(new Dog(1)); d.add(new Dog(2)); d.add(new Dog(1));</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;i.add(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.add(1);&nbsp;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(d.size() + " " + i.size());</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>}</div></div></div></div></div></code></div></span>	3 2	
<span style=" font-style: normal; font-weight: normal;"><div>What is the output of the following?</div><div><br /></div><div align="left"><code><div><div><div><div><div>import java.util.*;</div><div>class Dog implements Comparable {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>int size;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;Dog(int s) { size = s; }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public int compareTo(Object d) { return this.size - ((Dog)d).size; }</div><div>}</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;Set&lt;Dog&gt; d = new LinkedHashSet&lt;Dog&gt;();</div><div>&nbsp;&nbsp; <span class="Apple-tab-span" style="white-space:pre"> </span>Set&lt;Integer&gt; i = new LinkedHashSet&lt;Integer&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>d.add(new Dog(1)); d.add(new Dog(2)); d.add(new Dog(1));</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>i.add(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.add(1);&nbsp;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(d.size() + " " + i.size());</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></div></div></code></div></span>	3 2	
What is the output of the following?<div>&nbsp;&nbsp;<div align="left"><code><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String[] s = {"zip", "hop", "mix", "app"};</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Arrays.sort(s);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(String i : s) System.out.print(i + " ");</div><div>&nbsp;&nbsp;}</div><div>}</div></code></div></div>	app hop mix zip	
<span style=" font-style: normal; font-weight: normal;">What is the output of the following?<div>&nbsp;&nbsp;<div align="left"><code><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String[] s = {"zip", "hop", "mix", "app"};</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f = new Foo();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Arrays.sort(s, f);</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp; for(String i : s) System.out.print(i + " ");</div><div>&nbsp;&nbsp;}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;static class Foo implements Comparator&lt;String&gt; {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;public int compare(String a, String b) { return b.compareTo(a); }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></code></div></div></span>	zip mix hop app	
<span style=" font-style: normal; font-weight: normal;">What is the output of the following?<div>&nbsp;&nbsp;<div align="left"><code><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>String[] s = {"zip", "hop", "mix", "app"};</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>Foo f = new Foo();</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>Arrays.sort(s);</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;&nbsp;for(String i : s) System.out.print(i + " ");</div><div>&nbsp;&nbsp;}</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;static class Foo implements Comparator&lt;String&gt; {</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;&nbsp;public int compare(String a, String b) { return b.compareTo(a); }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>}</div><div>}</div></div></code></div></div></span>	app hop mix zip	
<span style=" font-style: normal; font-weight: normal;">What is the output of the following?<div>&nbsp;&nbsp;<div align="left"><code><div><div><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; <span class="Apple-tab-span" style="white-space:pre"> </span>String[] s = {"zip", "hop", "mix", "wiz"};</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f = new Foo();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Arrays.sort(s, f);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(String i: s) System.out.print(i + " ");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("\n" + Arrays.binarySearch(s, "mix"));</div><div>&nbsp;&nbsp;}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;static class Foo implements Comparator&lt;String&gt; {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;public int compare(String a, String b) { return b.compareTo(a); }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></div></code></div></div></span>	zip wiz mix hop<div>-1</div>	
<span style=" font-style: normal; font-weight: normal;">What is the output of the following?<div>&nbsp;&nbsp;<div align="left"><code><div><div><div><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String[] s = {"zip", "hop", "mix", "wiz"};</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f = new Foo();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Arrays.sort(s, f);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(String i: s) System.out.print(i + " ");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("\n" + Arrays.binarySearch(s, "mix", f));</div><div>&nbsp;&nbsp;}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>static class Foo implements Comparator&lt;String&gt; {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;public int compare(String a, String b) { return b.compareTo(a); }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></div></div></code></div></div></span>	zip wiz mix hop<div>2</div>	
<span style=" font-style: normal; font-weight: normal;">What is the output of the following?<div>&nbsp;&nbsp;<div align="left"><code><div><div><div><div><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String[] s = {"zip", "hop", "mix", "wiz"};</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f = new Foo();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Arrays.sort(s, f);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(String i: s) System.out.print(i + " ");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("\n" + Arrays.binarySearch(s, "lol", f));</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;static class Foo implements Comparator&lt;String&gt; {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public int compare(String a, String b) { return b.compareTo(a); }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></div></div></div></code></div></div></span>	zip wiz mix hop<div>-4</div>	
<span style=" font-style: normal; font-weight: normal;">What is the output of the following?<div>&nbsp;&nbsp;<div align="left"><code><div><div><div><div><div><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String[] s = {"zip", "hop", "mix", "wiz"};</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f = new Foo();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Arrays.sort(s, f);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(String i: s) System.out.print(i + " ");</div><div>&nbsp;&nbsp; &nbsp;System.out.println("\n" + Arrays.binarySearch(s, "lol"));</div><div>&nbsp;&nbsp;}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>static class Foo implements Comparator&lt;String&gt; {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public int compare(String a, String b) { return b.compareTo(a); }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></div></div></div></div></code></div></div></span>	zip wiz mix hop<div>-1</div>	
<span style=" font-style: normal; font-weight: normal;">What is the output of the following?<div>&nbsp;&nbsp;<div align="left"><code><div><div><div><div><div><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String[] s = {"zip", "hop", "mix", "wiz"};</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Arrays.sort(s);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(String i: s) System.out.print(i + " ");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("\n" + Arrays.binarySearch(s, "lol"));</div><div>&nbsp;&nbsp;}</div><div>}</div></div></div></div></div></div></div></code></div></div></span>	hop mix wiz zip<div>-2</div>	
<span style=" font-style: normal; font-weight: normal;">What is the output of the following?<div>&nbsp;&nbsp;<div align="left"><code><div><div><div><div><div><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String[] s = {"zip", "hop", "mix", "wiz"};</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Arrays.sort(s);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(String i: s) System.out.print(i + " ");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("\n" + Arrays.binarySearch(s, "mix"));</div><div>&nbsp;&nbsp;}</div><div>}</div></div></div></div></div></div></div></code></div></div></span>	hop mix wiz zip<div>1</div>	
A method-local inner class can access it's enclosing (outer) class's private members. T/F	true	
<span style=" font-style: normal; font-weight: normal;">A method-local inner class cannot access it's enclosing (outer) class's private members. T/F</span>	false	
<span style=" font-style: normal; font-weight: normal;">A method-local inner class can access it's enclosing method's local variables. T/F</span>	false	
<span style=" font-style: normal; font-weight: normal;">A method-local inner class cannot access it's enclosing method's local variables. T/F</span>	true	
<span style=" font-style: normal; font-weight: normal;">A method-local inner class can access it's enclosing method's local variables if they are marked final. T/F</span>	true	
<span style=" font-style: normal; font-weight: normal;">A method-local inner class cannot access it's enclosing method's local variables if they are marked final. T/F</span>	false	
A static nested class needs a reference to an instance of the enclosing class in order to instantiate it. T/F	false	
<span style=" font-style: normal; font-weight: normal;">A static nested class does not need a reference to an instance of the enclosing class in order to instantiate it. T/F</span>	true	
A static nested class does not have access to non-static members of the enclosing class. T/F	true	
<span style=" font-style: normal; font-weight: normal;">A static nested class has access to non-static members of the enclosing class. T/F</span>	false	
If an outer class named MyOuter has a static nested class named MyInner,&nbsp;<div>how do you instantiate a new instance of MyInner?</div>	<span style=" font-style: normal; font-weight: normal;">new MyOuter.MyInner();</span>	
A static nested class' variables and methods must be static. T/F	false	
A method-local inner class must be marked final. T/F	false<br /><br />(it is legal to do so, though)	
<span style=" font-style: normal; font-weight: normal;">A method-local inner class may be marked final. T/F</span>	true	
A method-local inner class may be marked abstract. T/F	true	
<span style=" font-style: normal; font-weight: normal;">A method-local inner class cannot be marked abstract. T/F</span>	false	
In order to use a method-local inner class that is marked abstract, you must...	create a subclass of the inner class	
A method-local inner class may be marked public. T/F	false<div><br /></div><div>local variables cannot be public</div>	
<span style=" font-style: normal; font-weight: normal;">A method-local inner class cannot be marked public. T/F</span>	true	
<span style=" font-style: normal; font-weight: normal;">A method-local inner class cannot be marked static. T/F</span>	true	
<span style=" font-style: normal; font-weight: normal;">A method-local inner class may access private members of the enclosing class. T/F</span>	true<br /><br />inner classes can access all members of the enclosing class	
<span style=" font-style: normal; font-weight: normal;">A method-local inner class cannot access private members of the enclosing class. T/F</span>	false<div><br /></div><div>an inner class can access all members of the enclosing class</div>	
An inner class instance has access to all members of the outside class. T/F	true	
<span style=" font-style: normal; font-weight: normal;">An inner class instance only has access to public members of the outside class. T/F</span>	false.<div><br /></div><div>an inner class instance can access all members of the outside class</div>	
What is the result?<div><br />&nbsp;<br><div align="left"><code><div>public class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Object o = new Object() {</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public boolean equals(Object obj) {</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return true;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(o.equals("Fred"));</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></code></div></div>	Compilation fails.<div><br /></div><div>A semicolon is missing from the curly bracket closing the anonymous class definition.</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br />&nbsp;<div align="left"><code><div>public class Example {</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>Object o = new Object() {</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>public boolean equals(Object obj) {</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>return true;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>};</div><div>&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;&nbsp;System.out.println(o.equals("Fred"));</div><div>&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>}</div><div>}</div></code></div></div></span>	true	
What is the result?<div><br /></div><div align="left"><code><div><div><div>class Foo { void bar() { System.out.println("1"); } }</div><div><br /></div><div>public class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Example().go();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>void go() {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Foo().bar();</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>class Foo { void bar() { System.out.println("2"); } }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>class Foo { void bar() { System.out.println("3"); } }</div><div>}</div></div></div></code></div>	3<div><br /></div><div>The "2" version of class Foo is declared after the instance of class Foo is created in the go() method</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /></div><div align="left"><code><div><div><div><div>class Foo { void bar() { System.out.println("1"); } }</div><div><br /></div><div>public class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Example().go();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;void go() {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>class Foo { void bar() { System.out.println("2"); } }</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Foo().bar();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>class Foo { void bar() { System.out.println("3"); } }</div><div>}</div></div></div></div></code></div></span>	2	
What inserted code produces the output "hi" from the following?<div>&nbsp;&nbsp;<div align="left"><code><div>public class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>class Foo {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;{ /*INSERT CODE HERE*/ }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Example().go();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>void go() {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Foo();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;void greet() { System.out.println("hi"); }</div><div>}</div></code></div></div>	<span style=" font-style: normal; font-weight: normal;">Example.this.greet();</span>	
Given,<br /><code>Runnable target = new MyRunnable();<div>Thread myThread = new Thread(target);</div></code><div><br /></div><div>Can the following class be used to create the target, so that the given code compiles correctly?</div><div><br /></div><div><code>public class MyRunnable extends Runnable{ public void run() {} }</code></div>	no<div><br /></div><div>interfaces are implemented, not extended</div>	
<span style=" font-style: normal; font-weight: normal;">Given,<br /><code>Runnable target = new MyRunnable();<div>Thread myThread = new Thread(target);</div></code><div><br /></div><div>Can the following class be used to create the target, so that the given code compiles correctly?</div><div><br /></div><div><code>public class MyRunnable implements Runnable{ public void run() {} }</code></div></span>	yes	
<span style=" font-style: normal; font-weight: normal;">Given,<br /><code>Runnable target = new MyRunnable();<div>Thread myThread = new Thread(target);</div></code><div><br /></div><div>Can the following class be used to create the target, so that the given code compiles correctly?</div><div><br /></div><div><code>public class MyRunnable implements Runnable{ void run() {} }</code></div></span>	no<div><br /></div><div>the run() method must be public.</div>	
Is the following a correct way to start a thread?<div><br /><div align="left"><code><br><div>class MyThread extends Thread {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>MyThread t = new MyThread();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Thread x = new Thread(t);</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;x.start();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public void run() { /* ... */ }</div><div>} &nbsp;</div></code></div></div>	Yes	
The sleep() method in the Thread class can throw an Interrupted Exception. T/F	true	
<span style=" font-style: normal; font-weight: normal;">The yield() method in the Thread class can throw an Interrupted Exception. T/F</span>	false	
The join() method in the Thread class can throw an InterruptedException. T/F	true	
The setPriority() method in the Thread class can throw an InterruptedException. T/F	false	
The wait() method in the Object class can throw an InterruptedException. T/F	true	
The notify() method in the Object class can throw an InterruptedException. T/F	false	
<span style=" font-style: normal; font-weight: normal;">The notifyAll() method in the Object class can throw an InterruptedException. T/F</span>	false	
The wait() method is implemented in the Thread class. T/F	false<div><br /></div><div>it is implemented in the Object class</div>	
<span style=" font-style: normal; font-weight: normal;">The wait() method is implemented in the Object class. T/F</span>	true	
What is the result?<div><br /><div align="left"><code><br><div>public class WaitTest {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("1 ");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>synchronized(args) {</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("2 ");</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>try { args.wait(); }</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>catch(InterruptedException e) { }</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;&nbsp; &nbsp;System.out.print("3 ");</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>}</div></code></div></div>	1 2<div><br /></div><div>the wait() never returns because no other thread will notify the main thread</div>	
Assume the following method is properly synchronized and caled from a thread A on an object B,<div><br /></div><div><code>wait(2000);</code></div><div><br /></div><div>after calling this method, when will thread A be able to get another turn at the CPU?</div>	after object B is notified, or after two seconds	
The notifyAll() method must be called from a synchronized context. T/F	true	
<span style=" font-style: normal; font-weight: normal;">The notifyAll() method must be called outside of a synchronized context. T/F</span>	false	
<span style=" font-style: normal; font-weight: normal;">The notify() method must be called outside of a synchronized context. T/F</span>	false	
<span style=" font-style: normal; font-weight: normal;">The wait() method must be called outside of a synchronized context. T/F</span>	false	
The notify() method must be called from a synchronized context. T/F	true	
<span style=" font-style: normal; font-weight: normal;">The wait() method must be called from a synchronized context. T/F</span>	true	
When a thread is waiting as a result of wait(), it releases its lock. T/F	true	
<span style=" font-style: normal; font-weight: normal;">When a thread is waiting as a result of wait(), it keeps its lock. T/F</span>	false<div><br /></div><div>it releases its lock</div>	
To call wait(), an object must own the lock on the thread. T/F	false<div><br /></div><div>the thread must own the lock on the object that wait() is being invoked on</div>	
<span style=" font-style: normal; font-weight: normal;">To call wait(), a thread must own the lock on the object. T/F</span>	true<div><br /></div><div>the thread must own the lock on the object that wait() is being invoked on</div>	
The notify() method is defined in the Thread class. T/F	false<div><br /></div><div>defined in the Object class.</div>	
<span style=" font-style: normal; font-weight: normal;">The notify() method is defined in the Object class. T/F</span>	true	
The notify() method causes a thread to immediately release its lock. T/F	false<div><br /></div><div>notify() releases a blocked thread that is waiting on the object lock</div><div><br /></div><div>notify() will not cause the executing thread to release its object lock</div>	
A thread can only release its locks by exiting the synchronized code. T/F	true	
notifyAll() notifies all waiting threads, regardless of the object they're waiting on. T/F	false<div><br /></div><div>notifyAll() notifies all threads waiting on a particular locked object</div>	
<div align="left"><code><div>public static synchronized void main(String[] args) throws</div>&nbsp;&nbsp;InterruptedException {<div>&nbsp;&nbsp;Thread t = new Thread();</div><div>&nbsp;&nbsp;t.start();</div><div>&nbsp;&nbsp;System.out.print("X");</div><div>&nbsp;&nbsp;t.wait(10000);</div><div>&nbsp;&nbsp;System.out.print("Y");</div><div>}</div><div><br /></div></code></div><div>What is the result?</div>	an exception is thrown at runtime<div><br /></div><div>a lock is not acquired on 't' before calling 't.wait()'. The method is synchronized, but it is not synchronized on 't'.</div>	
<span style=" font-style: normal; font-weight: normal;"><br><div align="left"><br><code><div>public static synchronized void main(String[] args) throws</div>&nbsp;InterruptedException {<div>&nbsp;&nbsp;Thread t = new Thread();</div><div>&nbsp;&nbsp;t.start();</div><div>&nbsp;&nbsp;System.out.print("X");</div><div>&nbsp;&nbsp;synchronized(t) {</div><div>&nbsp;&nbsp; &nbsp;t.wait(10000);</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;System.out.print("Y");</div><div>}</div><div><br /></div></code><br></div><br><div>What is the result?</div></span>	prints "X", waits 10 seconds, then prints "Y"	
<span style=" font-style: normal; font-weight: normal;"><br><div align="left"><br><code><div>public static void main(String[] args) throws</div>&nbsp;&nbsp;InterruptedException {<div>&nbsp;&nbsp;Thread t = new Thread();</div><div>&nbsp;&nbsp;t.start();</div><div>&nbsp;&nbsp;System.out.print("X");</div><div>&nbsp;&nbsp;synchronized(t) {</div><div>&nbsp;&nbsp; &nbsp;t.wait(10000);</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;System.out.print("Y");</div><div>}</div><div><br /></div></code><br></div><br><div>What is the result?</div><br></span>	<span style=" font-style: normal; font-weight: normal;">prints "X", waits 10 seconds, then prints "Y"</span>	
What is the result?<div align="left"><span style=" font-style: normal; font-weight: normal;"><code><div><br /></div><div>public static void main(String[] args) throws</div>&nbsp;&nbsp;InterruptedException {<div>&nbsp;&nbsp;Thread t = new Thread();</div><div>&nbsp;&nbsp;t.start();</div><div>&nbsp;&nbsp;System.out.print("X");</div><div>&nbsp;&nbsp;synchronized(this) {</div><div>&nbsp;&nbsp; &nbsp;t.wait(10000);</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;System.out.print("Y");</div><div>}</div></code></span></div>	<span style=" font-style: normal; font-weight: normal;">an exception is thrown at runtime<div><br /></div><div>a lock is not acquired on 't' before calling 't.wait()'. The call to wait() is synchronized, but it is not synchronized on 't'.</div></span>	
What is the result?<div><br /><div align="left"><code><br><div>class Foo {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo() { System.out.print(" Howdy"); }</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public void bar() { System.out.print(" partner"); }</div><div>}</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String [] args) {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;Foo f = new Foo() {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;public void bar() { System.out.print(" qux"); }</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;};</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;f.bar();</div><div>}<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><br></code></div></div>	" Howdy qux" printed	
What is the result?<div><br /><div align="left"><code><br><div>class Foo {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo() { System.out.print(" Howdy"); }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public void bar() { System.out.print(" partner"); }</div><div>}</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String [] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f = new Foo() {</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public void bar(String s) { System.out.print(" qux"); }</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;};</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>f.bar();</div><div>}<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><br></code></div></div>	" Howdy partner" is printed	
What is the result?&nbsp;<div><br /><div align="left"><code><div>public class Example implements Runnable {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>void go(long id) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(id);</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print(Thread.currentThread().getId() + " "); //assume this prints a "1 "</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Example().run();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public void run() { go(Thread.currentThread().getId()); }</div><div>}</div></code></div></div>	1 1<div><br /></div><div>a new thread is not started</div>	
What is the result?<div>&nbsp;&nbsp;<div align="left"><code><div>public class Example implements Runnable {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>void go(long id) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(id);</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print(Thread.currentThread().getId() + " ");&nbsp;//assume this prints a "1 "</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Example().start();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public void run() { go(Thread.currentThread().getId()); }</div><div>}</div></code></div></div>	Compile error<div><br /></div><div>The start() method is defined in the Thread class, not the Runnable interface.</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div>&nbsp;&nbsp;<div align="left"><code><div><div>public class Example implements Runnable {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>void go(long id) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;System.out.println(id);</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;System.out.print(Thread.currentThread().getId() + " ");&nbsp;//assume this prints a "1 "</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Thread(new Example());</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public void run() { go(Thread.currentThread().getId()); }</div><div>}</div></div></code></div></div></span>	1<div><br /></div><div>a new thread is created and given a Runnable, but not started.</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div>&nbsp;&nbsp;<div align="left"><code><div><div><div>public class Example implements Runnable {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>void go(long id) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(id);</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;System.out.print(Thread.currentThread().getId() + " ");</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Thread(new Example()).run();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public void run() { go(Thread.currentThread().getId()); }</div><div>}</div></div></div></code></div></div></span>	1 1<div><br /></div><div>a new thread is created and the run() method is invoked directly, but a new thread isn't started.</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div>&nbsp;&nbsp;<div align="left"><code><div><div><div><div>public class Example implements Runnable {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>void go(long id) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(id);</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print(Thread.currentThread().getId() + " ");</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>new Thread(new Example()).start();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public void run() { go(Thread.currentThread().getId()); }</div><div>}</div></div></div></div></code></div></div></span>	1 8<div><br /></div><div>The '8' could be any number that is not 1<br /><div><br /></div><div>a new thread is created and started</div></div>	
What is the result?<div><br /></div><br><div align="left"><code><br><div><div>public class Example implements Runnable {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Thread t = new Thread(new Example());</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>t.start();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("1 ");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>t.join();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("2 ");</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;&nbsp;public void run() {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("3 ");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("4 ");</div><div>}<span class="Apple-tab-span" style="white-space:pre"> </span>}</div></div><br></code></div>	Compile error<div><br /></div><div>uncaught exception. join() throws an InterruptedException</div>	
<div>What is the result?</div><div><br /></div><br><div align="left"><code><br><div>public class Example implements Runnable {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Thread t = new Thread(new Example());</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>t.start();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("1 ");</div><div>&nbsp;&nbsp; <span class="Apple-tab-span" style="white-space:pre"> </span>try { t.join(); }</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>catch(Exception e) { }</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("2 ");</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public void run() {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("3 ");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("4 ");</div><div>}<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><br></code></div>	3 4 1 2<div>or</div><div>1 3 4 2</div>	
<div>What is the result?&nbsp;</div><div><br /></div><br><div align="left"><code><br><div>class Foo {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>synchronized void bar(long id) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;for(int x = 1; x &lt; 3; x++) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;System.out.print(id + " ");</div><div>&nbsp;&nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;Thread.yield();</div><div>} }<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>public class Example implements Runnable {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Foo f;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Example().go();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;void go() {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>f = new Foo();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Thread(new Example()).start(); //assume thread id is 1</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Thread(new Example()).start(); //assume thread id is 2</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public void run() {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>f.bar(Thread.currentThread().getId());</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></code></div>	an exception is thrown at runtime<div><br /></div><div>The class variable 'f' is not static. When the Runnable object in each thread executes run(), f is not assigned to anything</div>	
<span style=" font-style: normal; font-weight: normal;"><div>What is the result?&nbsp;</div><div><br /></div><div align="left"><code><div><div>class Foo {</div><div>&nbsp;&nbsp;synchronized void bar(long id) {</div><div>&nbsp;&nbsp; &nbsp;for(int x = 1; x &lt; 3; x++) {</div><div>&nbsp;&nbsp; &nbsp; &nbsp;System.out.print(id + " ");</div><div>&nbsp;&nbsp; &nbsp; &nbsp;Thread.yield();</div><div>} } }</div><div>public class Example implements Runnable {</div><div>&nbsp;&nbsp;static Foo f;</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;new Example().go();</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;void go() {</div><div>&nbsp;&nbsp; &nbsp;f = new Foo();</div><div>&nbsp;&nbsp; &nbsp;new Thread(new Example()).start(); //assume thread id is 1</div><div>&nbsp;&nbsp; &nbsp;new Thread(new Example()).start(); //assume thread id is 2</div><div>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;public void run() {</div><div>&nbsp;&nbsp; &nbsp;f.bar(Thread.currentThread().getId());</div><div>&nbsp;&nbsp;}</div><div>}</div></div></code></div></span>	1 1 2 2	
When compiling java files with javac, the '-d' option does what?	The -d option lets you tell the compiler in which dir to put the .class files	
Given:<div><br /></div><br><div align="left"><code><br><div>FooProject</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; |</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; |-- Example.java</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; |</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; |-- classes</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |-- Example.class</div><div><br /></div><br></code></div><br><div>Assuming Example does not have a package statement,</div><div>What command do you use to compile Example.java and generate the directory structure above?</div>	javac -d classes Example.java	
When running the java command, you must specify exactly one class file to execute. T/F	true	
<span style=" font-style: normal; font-weight: normal;">When running the java command, you must specify at least one class file to execute.</span>	false<br /><br />You must specify ONLY one class file	
Is this usage a correct structure of the java command?<br /><br /><code>java [options] class [args]</code>	yes	
<span style=" font-style: normal; font-weight: normal;">Is this usage a correct structure of the java command?<br /><br /><code>java [args] [options] class</code></span>	no<div><br /></div><div>Correct usage is:</div><div><br /></div><br><code><div><span style=" font-style: normal; font-weight: normal;">java [options] class [args]</span></div></code>	
<span style=" font-style: normal; font-weight: normal;">Is this usage a correct structure of the java command?<br /><br /><code>java [args] class&nbsp;[options]</code></span>	no<div><br /></div><div>Correct usage is</div><div><br /></div><br><code><br><div><span style=" font-style: normal; font-weight: normal;">java [options] class [args]</span></div><br></code>	
<span style=" font-style: normal; font-weight: normal;">Is this usage a correct structure of the java command?<br /><br /><code>java [options]&nbsp;<span style=" font-style: normal; font-weight: normal;">[args]&nbsp;</span>class</code></span>	no<div><br /></div><div><span style=" font-style: normal; font-weight: normal;"><div>Correct usage is:</div><div><br /></div><code><div><span style="font-style: normal; font-weight: normal; ">java [options] class [args]</span></div></code></span></div>	
<span style=" font-style: normal; font-weight: normal;">Is this usage a correct structure of the java command?<br /><br /><code>java<span style=" font-style: normal; font-weight: normal;"><span style="font-style: normal; font-weight: normal; ">&nbsp;</span>class</span>&nbsp;[options]&nbsp;<span style="font-style: normal; font-weight: normal; ">[args]</span></code></span>	<span style=" font-style: normal; font-weight: normal;">no<div><br /></div><div><span style="font-style: normal; font-weight: normal; "><div>Correct usage is:</div><div><br /></div><code><div><span style="font-style: normal; font-weight: normal; ">java [options] class [args]</span></div></code></span></div></span>	
<span style=" font-style: normal; font-weight: normal;">Is this usage a correct structure of the java command?<br /><br /><code>java<span style="font-style: normal; font-weight: normal; "><span style="font-style: normal; font-weight: normal; ">&nbsp;</span>class</span>&nbsp;<span style=" font-style: normal; font-weight: normal;">[args]&nbsp;</span>[options]</code></span>	<span style=" font-style: normal; font-weight: normal;">no<div><br /></div><div><span style="font-style: normal; font-weight: normal; "><div>Correct usage is:</div><div><br /></div><code><div><span style="font-style: normal; font-weight: normal; ">java [options] class [args]</span></div></code></span></div></span>	
In which package is the Properties class located?	java.util.Properties	
When running the java command, what does the -D option do?	Allows you to create a system property and assign it a value<div><br /></div><div>Ex.</div><div>java -DmyProp=myValue Foo</div>	
When executing the java command, you may only create one system property. T/F	true	
<span style=" font-style: normal; font-weight: normal;">When executing the java command, you may create multiple system properties. T/F</span>	false<br /><br />you may only create one system property when executing the java command	
A static import is used when the imported class is static. T/F	false<div><br /></div><div>static imports are used when you want to use a class's static members (Integer.MAX_VALUE)</div>	
<span style=" font-style: normal; font-weight: normal;">A static import is used when you want to use static members of a class. T/F</span>	true	
What is the result?<br><div align="left"><br><div>&nbsp;&nbsp;<code><div>public class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(Integer.MAX_VALUE); // biggest Integer is&nbsp;2147483647</div><div>} }</div><br></code></div></div>	<span style=" font-style: normal; font-weight: normal;">2147483647</span>	
What is the result?<br><div align="left"><br><div>&nbsp;&nbsp;<code><div><div>import static java.lang.Integer.*;</div><div>public class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(MAX_VALUE);&nbsp;// biggest Integer is&nbsp;2147483647</div><div>} }</div></div></code></div><br></div>	<span style=" font-style: normal; font-weight: normal;">2147483647</span>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<br><div align="left"><br><div>&nbsp;&nbsp;<code><div><div>import static java.lang.Integer;</div><div>public class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;System.out.println(MAX_VALUE); // biggest Integer is 2147483647</div><div>} }</div></div></code></div><br></div><br></span>	compile error<div><br /></div><div>The static import statement should be:</div><div><br /></div><div>import static java.lang.Integer.*;</div>	
What is the result?<br><div align="left"><br><div>&nbsp;&nbsp;<code><div><div><div>import java.lang.Integer.*;</div><div>public class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp; &nbsp;System.out.println(MAX_VALUE); // biggest Integer is 2147483647</div><div>} }</div></div></div></code></div><br></div>	compile error<div><br /></div><div>MAX_VALUE is a static member in the Integer class. The import statement should be a static import statement.<br /><br />import static java.lang.Integer.*;</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<br><div align="left"><br><div>&nbsp;&nbsp;<code><div><div><div>import static java.lang.System.out;</div><div>public class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>out.println("1");</div><div>} }</div></div></div></code></div><br></div><br></span>	1	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div>&nbsp;&nbsp;<br><div align="left"><br><code><div><div><div><div>import static java.lang.System.*;</div><div>public class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;out.println("1");</div><div>} }</div></div></div></div><br></code></div><br></div></span>	1	
<span style=" font-style: normal; font-weight: normal;">What is the result?<br><div align="left"><br><div>&nbsp;&nbsp;<code><div><div><div><div><div>import java.lang.System.out;</div><div>public class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>out.println("1");</div><div>} }</div></div></div></div></div></code></div><br></div><br></span>	compile error<div><br /></div><div>out is a static member of the System class<br /><br />The import statement should be a static import statement.</div><div><br /></div><div>import static java.lang.System.out;</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<br><div align="left"><br><div>&nbsp;&nbsp;<code><div><div><div><div><div>import java.lang.System.*;</div><div>public class Example {</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>out.println("1");</div><div>} }</div></div></div></div></div></code></div><br></div><br></span>	<span style=" font-style: normal; font-weight: normal;">compile error<div><br /></div><div>out is a static member of the System class<br /><br />The import statement should be a static import statement.</div><div><br /></div><div>import static java.lang.System.*;</div></span>	
What is the result?<div><br /></div><br><code><br><div align="left"><div align="left">class Example {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>static public void main(String[] args) {</div><div align="left">&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String[] sa = {"hi", "there", "cat"};</div><div align="left">&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(int i=0; ++i &lt; sa.length; )</div><div align="left">&nbsp;&nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print(sa[i] + " ");</div><div align="left">} }</div></div><br></code>	there cat	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /></div><code><div align="left"><div align="left">class Example {</div><div align="left">&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>static public void main(String[] args) {</div><div align="left">&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>String[] sa = {"hi", "there", "cat"};</div><div align="left">&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>for(int i=0; i++ &lt; sa.length; )</div><div align="left">&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>System.out.print(sa[i] + " ");</div><div align="left">} }</div></div></code></span>	runtime exception<div><br /></div><div>ArrayIndexOutOfBoundsException</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /></div><code><div align="left"><div align="left"><div align="left">class Example {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>static public void main(String[] args) {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>String[] sa = {"hi", "there", "cat"};</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>for(int i=0; i++ &lt; sa.length-1; )</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print(sa[i] + " ");</div><div align="left">} }</div></div></div></code></span>	there cat	
Consider this command invocation:<div><br /></div><div>javac -classpath Foo Bar.java<br /><br />What does the 'Foo' arg to the -classpath option describe?</div>	Foo describes where to look for the classes Bar.java needs.	
What is the result?<div><br /><div align="left"><code><br><div>public class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public int pub_i = 1;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>int pub_d = 2;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>protected int pub_p = 3;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>private int pub_pr = 4;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span></div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Example().foo();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>void foo() {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>class bar {</div><div>&nbsp;&nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>void print() {</div><div>&nbsp;&nbsp; &nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(pub_i);</div><div>&nbsp;&nbsp; &nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(pub_d);</div><div>&nbsp;&nbsp; &nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(pub_p);</div><div>&nbsp;&nbsp; &nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(pub_pr);</div><div>&nbsp;&nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new bar().print();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div><br></code></div></div>	1<div>2</div><div>3</div><div>4</div>	
What is the result?<div><br /><div align="left"><code><br><div>public class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Example().foo();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>void foo() {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>int xyz = 789;</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>class bar {</div><div>&nbsp;&nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>void print() {</div><div>&nbsp;&nbsp; &nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(xyz);</div><div>&nbsp;&nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new bar().print();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div><br></code></div></div>	compile error<div><br /></div><div>local variable xyz is accessed from within inner class</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div>public class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>new Example().foo();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;void foo() {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>final int xyz = 789;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;class bar {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;void print() {</div><div>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(xyz);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;new bar().print();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>}</div></div></code></div></div></span>	789	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div>public class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>new Example().foo();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>void foo() {</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>static int xyz = 789;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;&nbsp;class bar {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;&nbsp;&nbsp;void print() {&nbsp;System.out.println(xyz);&nbsp;}</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>new bar().print();</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;}</div><div>}</div></div></code></div></div></span>	compile error<div><br /></div><div>local variables cannot be marked static</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div>public class Example {</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>public static void main(String[] args) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>new Example().foo();</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>}</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>void foo() {</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>public int xyz = 789;</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;class bar {</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;&nbsp;void print() {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>System.out.println(xyz);</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>}</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>&nbsp;}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space: pre; "> </span>new bar().print();</div><div><span class="Apple-tab-span" style="white-space: pre; "> </span>}</div><div>}</div></div></code></div></div></span>	compile error<div><br /></div><div>local variables cannot be marked public</div>	
What is the contents of the file 'abc.txt' after the following is run?<br /><div><br /><div align="left"><code><br><div>import java.io.*;</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) throws IOException {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;Writer out = new FileWriter("abc.txt");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>out.write("howdy");</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;out.close();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Writer out2 = new FileWriter("abc.txt");</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;out2.write(" partner");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>out2.close();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>}</div><br></code></div></div>	&nbsp;partner	
<span style=" font-style: normal; font-weight: normal;">What is the contents of the file 'abc.txt' after the following is run?<br /><div><br /><div align="left"><code><div><div>import java.io.*;</div><div>class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) throws IOException {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>Writer out = new FileWriter("abc.txt");</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>out.write("howdy");</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>out.close();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>Writer out2 = new FileWriter("abc.txt", true);</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>out2.write(" partner");</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>out2.close();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></code></div></div></span>	howdy partner	
<span style=" font-style: normal; font-weight: normal;">What is the contents of the file 'abc.txt' after the following is run?<br /><div><br /><div align="left"><code><div><div><div>import java.io.*;</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) throws IOException {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;Writer out = new FileWriter("abc.txt");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>out.write("howdy");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>out.close();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Writer out2 = new FileWriter("abc.txt", false);</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;out2.write(" partner");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>out2.close();</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></code></div></div></span>	&nbsp;partner	
<span style=" font-style: normal; font-weight: normal;">What is the contents of the file 'abc.txt' after the following is run?<br /><div><br /><div align="left"><code><div><div>import java.io.*;</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) throws IOException {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;Writer out = new FileWriter("abc.txt");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>out.write("howdy");</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;out.close();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Writer out2 = new FileWriter("abc.txt");</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;out2.append(" partner");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>out2.close();</div><div>}&nbsp;}</div></div></code></div></div></span>	&nbsp;partner	
Locale()<div><br /></div><div>is a correct way to construct a Locale object. T/F</div>	false	
<span style=" font-style: normal; font-weight: normal;">Locale(String language)<div><br /></div><div>is a correct way to construct a Locale object. T/F</div></span>	true	
<div>Locale(String language, String country)</div><div><br /></div><div>is a correct way to construct a Locale object. T/F</div>	true	
<div>Locale(String language, String country, String variant)</div><div><br /></div><div>is a correct way to construct a Locale object. T/F</div>	true	
<div>Locale(String country, String language)</div><div><br /></div><div>is a correct way to construct a Locale object. T/F</div>	false<div><br /></div><div>Local(String language, String country)</div>	
What is the result?<div><br /><div align="left"><code><br><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;Boolean b = new Boolean("TruE");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>if(b)</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("true");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>else</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("false");</div><div>} }</div></code></div></div>	true	
What is the result?<div><br /><div align="left"><code><br><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Boolean b = new Boolean("null");</div><div>&nbsp;&nbsp; &nbsp;if(b)</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("true");</div><div>&nbsp;&nbsp; &nbsp;else</div><div>&nbsp;&nbsp; &nbsp; <span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println("false");</div><div>} }</div><br></code></div></div>	false	
<div>What is the result?</div><div><br /></div><br><div align="left"><code><br><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>static String s_s = "howdy";</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s1 = "howdy";</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(s1 == s_s);</div><div>} }</div><br></code></div>	true	
<span style=" font-style: normal; font-weight: normal;"><div>What is the result?</div><div><br /></div><div align="left"><code><div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>static String s_s = "howdy";</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s1 = "howdy";</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;System.out.println(s1.equals(s_s));</div><div>} }</div></div></code></div></span>	true	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>static String s_s = "howdy";</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s1 = new String(s_s);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(s1.equals(s_s));</div><div>} }</div></div></code></div></div></span>	true	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div>class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>static String s_s = "howdy";</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>String s1 = new String(s_s);</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(s1 == s_s);</div><div>} }</div></div></div></code></div></div></span>	false	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Map&lt;String, String&gt; fruit = new LinkedHashMap&lt;String, String&gt;();</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;fruit.put("Apple", "yellow");</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;fruit.put("Cherry", "red");</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;fruit.put("Melon", "pink");</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;fruit.put("Apple", "rotted");</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;for(String key : fruit.keySet())</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(key + ": " + fruit.get(key));</div><div>} }</div></div></code></div></div></span>	Apple: rotted<div>Cherry: red</div><div>Melon: pink</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Map&lt;String, String&gt; fruit = new LinkedHashMap&lt;String, String&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Apple", "yellow");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Cherry", "red");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Cherry", "blue");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Melon", "pink");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(String key : fruit.keySet())</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(key + ": " + fruit.get(key));</div><div>} }</div></div></code></div></div></span>	Apple: yellow<div>Cherry: blue</div><div>Melon: pink</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Map&lt;String, String&gt; fruit = new HashMap&lt;String, String&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Apple", "yellow");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Cherry", "red");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Cherry", "blue");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Melon", "pink");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(String key : fruit.keySet())</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(key + ": " + fruit.get(key));</div><div>} }</div></div></code></div></div></span>	The order is not guaranteed. The lines below can be in any order.<div><br /><div>Cherry: blue</div><div>Apple: yellow</div><div>Melon: pink</div></div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Map&lt;String, String&gt; fruit = new TreeMap&lt;String, String&gt;();</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;fruit.put("Cherry", "blue");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Cherry", "red");</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;fruit.put("Melon", "pink");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Apple", "yellow");</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;for(String key : fruit.keySet())</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(key + ": " + fruit.get(key));</div><div>} }</div></div></div></code></div></div></span>	Apple: yellow<div>Cherry: red</div><div>Melon: pink</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) throws Exception {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;Map&lt;String, String&gt; fruit = new LinkedHashMap&lt;String, String&gt;(16, 0.75f, true);</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;fruit.put("Cherry", "blue");</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;fruit.put("Cherry", "red");</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;fruit.put("Melon", "pink");</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;fruit.put("Apple", "yellow");</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;fruit.get("Cherry");</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;fruit.get("Melon");</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;Set&lt;String&gt; keys = new LinkedHashSet&lt;String&gt;(fruit.keySet());</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;for(String key : keys)</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp; &nbsp;System.out.println(key + ": " + fruit.get(key));</div><div>} }</div></div></code></div></div></span>	Apple: yellow<div>Cherry: red</div><div>Melon: pink</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) throws Exception {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Map&lt;String, String&gt; fruit = new LinkedHashMap&lt;String, String&gt;(16, 0.75f, true);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Cherry", "blue");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Cherry", "red");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Melon", "pink");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.put("Apple", "yellow");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>fruit.get("Cherry");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Set&lt;String&gt; keys = new LinkedHashSet&lt;String&gt;(fruit.keySet());</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(String key : keys)</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(key + ": " + fruit.get(key));</div><div>} }</div></div></div></code></div></div></span>	Melon: pink<div>Apple: yellow</div><div>Cherry: red</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div>import java.util.*;</div><div>class Shape {}</div><div>class Circle extends Shape {}</div><div>class Rectangle extends Shape {}</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>ArrayList&lt;Shape&gt; a = new ArrayList&lt;Shape&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>a.add(new Circle());</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>a.add(new Rectangle());</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Shape s = a.get(1);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(s.getClass());</div><div>} }</div></div></code></div></div></span>	class Rectangle	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><div align="left"><code><div><div><br /></div><div><div>import java.util.*;</div><div>class Shape {}</div><div>class Circle extends Shape {}</div><div>class Rectangle extends Shape {}</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;ArrayList&lt;? extends Shape&gt; a = new ArrayList&lt;? extends Shape&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>a.add(new Circle());</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;a.add(new Rectangle());</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Shape s = a.get(1);</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;System.out.println(s.getClass());</div><div>} }</div></div></div></code></div></div></span>	compile error<div><br /></div><div>? indicates an unknown type. The compiler does not allow adding or inserting into such types</div>	
<span style=" font-style: normal; font-weight: normal;">Does the following compile without error or warning?<div><div align="left"><code><div><div><br /></div><div><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>List l = new LinkedList();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(1);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add("howdy");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(true);</div><div>} }</div></div></div></div></code></div></div></span>	no<div><br /></div><div>this compiles with warnings</div>	
<span style=" font-style: normal; font-weight: normal;">Does the following compile without error or warning?<div><div align="left"><code><div><div><br /></div><div><div><div><div>import java.util.*;</div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>List&lt;Object&gt; l = new LinkedList&lt;Object&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(1);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add("howdy");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>l.add(true);</div><div>} }</div></div></div></div></div></code></div></div></span>	yes	
The collection class java.util.LinkedHashMap can be used to maintain the entries in the order in which they were last accessed. T/F	true	
<span style=" font-style: normal; font-weight: normal;">The collection class java.util.HashSet can be used to maintain the entries in the order in which they were last accessed. T/F</span>	false	
<span style=" font-style: normal; font-weight: normal;">The collection class java.util.Hashtable can be used to maintain the entries in the order in which they were last accessed. T/F</span>	false	
The collection class java.util.Vector can be used to maintain the entries in the order in which they were last accessed. T/F	false	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;String s1 = "a";</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s2 = "b";</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(greater(s1, s2));</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;static String greater(String a, String b) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;if(a.compareTo(b) &gt; 0)</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;return a;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>else if(a.compareTo(b) &lt; 0)</div><div>&nbsp;&nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;return b;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a + " EQUAL " + b;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>}&nbsp;</div></div></div></div></code></div></div></span>	b	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div><div><div>class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s1 = "B";</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;String s2 = "a";</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(greater(s1, s2));</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>static String greater(String a, String b) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>if(a.compareTo(b) &gt; 0)</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;return a;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>else if(a.compareTo(b) &lt; 0)</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return b;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a + " EQUAL " + b;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}&nbsp;</div></div></div></div></div></code></div></div></span>	a	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div><div><div><div>class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s1 = "B";</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s2 = "C";</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(greater(s1, s2));</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>static String greater(String a, String b) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;if(a.compareTo(b) &gt; 0)</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>else if(a.compareTo(b) &lt; 0)</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;return b;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a + " EQUAL " + b;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}&nbsp;</div></div></div></div></div></div></code></div></div></span>	C	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;String s1 = "z";</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s2 = " ";</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(greater(s1, s2));</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>static String greater(String a, String b) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;if(a.compareTo(b) &gt; 0)</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a;</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;else if(a.compareTo(b) &lt; 0)</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;return b;</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;return a + " EQUAL " + b;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}&nbsp;</div></div></div></div></code></div></div></span>	z	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div><div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;String s1 = " ";</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s2 = "C";</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(greater(s1, s2));</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;static String greater(String a, String b) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>if(a.compareTo(b) &gt; 0)</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>else if(a.compareTo(b) &lt; 0)</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return b;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a + " EQUAL " + b;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}&nbsp;</div></div></div></div></div></code></div></div></span>	C	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div><div><div>class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s1 = "1";</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s2 = " ";</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(greater(s1, s2));</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>static String greater(String a, String b) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>if(a.compareTo(b) &gt; 0)</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>else if(a.compareTo(b) &lt; 0)</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return b;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a + " EQUAL " + b;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}&nbsp;</div></div></div></div></div></code></div></div></span>	1	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div><div><div>class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s1 = "1";</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;String s2 = "9";</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(greater(s1, s2));</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>static String greater(String a, String b) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>if(a.compareTo(b) &gt; 0)</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;return a;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>else if(a.compareTo(b) &lt; 0)</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return b;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a + " EQUAL " + b;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}&nbsp;</div></div></div></div></div></code></div></div></span>	9	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div><div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;String s1 = "e";</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s2 = "9";</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(greater(s1, s2));</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;static String greater(String a, String b) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>if(a.compareTo(b) &gt; 0)</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>else if(a.compareTo(b) &lt; 0)</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return b;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a + " EQUAL " + b;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}&nbsp;</div></div></div></div></div></code></div></div></span>	e	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div><div><div>class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;String s1 = "a";</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s2 = "aa";</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;System.out.println(greater(s1, s2));</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;static String greater(String a, String b) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>if(a.compareTo(b) &gt; 0)</div><div>&nbsp;&nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;return a;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>else if(a.compareTo(b) &lt; 0)</div><div>&nbsp;&nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;return b;</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a + " EQUAL " + b;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>}&nbsp;</div></div></div></div></div></code></div></div></span>	aa	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div><div><div><div>class Example {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s1 = "z";</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String s2 = "aa";</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;System.out.println(greater(s1, s2));</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>static String greater(String a, String b) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>if(a.compareTo(b) &gt; 0)</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;return a;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>else if(a.compareTo(b) &lt; 0)</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;return b;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return a + " EQUAL " + b;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}&nbsp;</div></div></div></div></div></div></code></div></div></span>	z	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div><div><div>import java.util.*;</div><div>class Example</div><div>{</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>List&lt;Integer&gt; list = new LinkedList&lt;Integer&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>list.add(1); list.add(2); list.add(-2);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(Iterator i=list.iterator(); i.hasNext(); ){</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Integer in = i.next();</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(in);</div><div>}<span class="Apple-tab-span" style="white-space:pre"> </span>}<span class="Apple-tab-span" style="white-space:pre"> </span>}</div></div></div></div></div></code></div></div></span>	compile error<div><br /></div><div>i.next() return type is Object. Object cannot be assigned to an Integer</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div><div><div><div>import java.util.*;</div><div>class Example</div><div>{</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>List&lt;Integer&gt; list = new LinkedList&lt;Integer&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>list.add(1); list.add(2); list.add(-2);</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(Iterator&lt;Integer&gt; i=list.iterator(); i.hasNext(); ){</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>Integer in = i.next();</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(in);</div><div>}<span class="Apple-tab-span" style="white-space:pre"> </span>}<span class="Apple-tab-span" style="white-space:pre"> </span>}</div></div></div></div></div></div></code></div></div></span>	1<div>2</div><div>-2</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div><div><div><div><div>import java.util.*;</div><div>class Example</div><div>{</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>List&lt;String&gt; list = new LinkedList&lt;String&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>list.add("Apple"); list.add("Melon"); list.add("Mango");</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(Iterator&lt;String&gt; i=list.iterator(); i.hasNext(); ){</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String in = i.next();</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(in);</div><div>}<span class="Apple-tab-span" style="white-space:pre"> </span>}<span class="Apple-tab-span" style="white-space:pre"> </span>}</div></div></div></div></div></div></div></code></div></div></span>	Apple<div>Melon</div><div>Mango</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><div align="left"><code><div><div><div><div><div><div><div><div><br /></div><div><div>import java.util.*;</div><div>class Example</div><div>{</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;List&lt;String&gt; list = new LinkedList&lt;String&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>list.add("Apple"); list.add("Melon"); list.add("Mango");</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;for(Iterator i=list.iterator(); i.hasNext(); ){</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>String in = i.next();</div><div>&nbsp;&nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;System.out.println(in);</div><div>}<span class="Apple-tab-span" style="white-space:pre"> </span>}<span class="Apple-tab-span" style="white-space:pre"> </span>}</div></div></div></div></div></div></div></div></div></code></div></div></span>	compile error<div><br /></div><div>i.next() return type is Object. Object cannot be assigned to a String</div>	
Is this a compilable abstract class?<br><div align="left"><code><br><div><br /></div><div><div>public abstract class Example {&nbsp;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>abstract public void foo();</div><div>}</div></div><br></code><br></div>	yes	
<span style=" font-style: normal; font-weight: normal;">Is this a compilable abstract class?<div align="left"><code><div><br /></div><div><div><div>public abstract class Example {&nbsp;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>abstract public void foo() { }</div><div>}</div></div></div></code></div></span>	no<div><br /></div><div>abstract methods cannot have a body</div>	
<span style=" font-style: normal; font-weight: normal;">Is this a compilable abstract class?<div align="left"><code><div><br /></div><div><div><div><div><div>public abstract class Example {&nbsp;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public void foo();</div><div>}</div></div></div></div></div></code></div></span>	no<div><br /></div><div>the method should be declared abstract OR given a body</div>	
<span style=" font-style: normal; font-weight: normal;">Is this a compilable abstract class?<div align="left"><code><div><br /></div><div><div><div>public class Example {&nbsp;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>abstract public void foo();</div><div>}</div></div></div></code></div></span>	no<div><br /></div><div>class Example is not an abstract class</div>	
Does this compile successfully?<br><div align="left"><code><br><div><br /></div><div><div>import java.util.*;</div><div>public class Example {&nbsp;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public static &lt;T&gt; List&lt;T&gt; foo(List&lt;T&gt; input) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>List&lt;T&gt; output = new LinkedList&lt;T&gt;();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>//do things</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>return output;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div><br></code><br></div>	yes	
<span style=" font-style: normal; font-weight: normal;">Does this compile successfully?<div align="left"><code><div><br /></div><div><div><div><div>import java.util.*;</div><div>public class Example {&nbsp;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static &lt;T&gt; List&lt;? extends T&gt; foo(List&lt;T&gt; input) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;List&lt;T&gt; output = new LinkedList&lt;T&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>//do things</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return output;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>}</div></div></div></div></code></div></span>	yes	
<span style=" font-style: normal; font-weight: normal;">Does this compile successfully?<div align="left"><code><div><br /></div><div><div><div><div><div><div>import java.util.*;</div><div>public class Example {&nbsp;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static &lt;T&gt; List&lt;? extends T&gt; foo(List&lt;? extends T&gt; input) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;&nbsp;List&lt;T&gt; output = new LinkedList&lt;T&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>//do things</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return output;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></div></div></div></code></div></span>	yes	
<span style=" font-style: normal; font-weight: normal;">Does this compile successfully?<div align="left"><code><div><br /></div><div><div><div><div><div><div><div><div>import java.util.*;</div><div>public class Example {&nbsp;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static List&lt;? extends T&gt; &lt;T&gt; foo(List&lt;? super T&gt; input) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>List&lt;T&gt; output = new LinkedList&lt;T&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>//do things</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return output;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></div></div></div></div></div></code></div></span>	no<div><br /></div><div>the method header should be:</div><div><br /></div><div>public static &lt;T&gt; List&lt;? extends T&gt; foo(...)</div>	
<span style=" font-style: normal; font-weight: normal;">Does this compile successfully?<div align="left"><code><div><br /></div><div><div><div><div><div>import java.util.*;</div><div>public class Example {&nbsp;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static &lt;? extends T&gt; List&lt;T&gt; foo(List&lt;T&gt; input) {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;&nbsp;List&lt;T&gt; output = new LinkedList&lt;T&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>//do things</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return output;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;}</div><div>}</div></div></div></div></div></code></div></span>	no<div><br /></div><div>wildcards cannot be used in the type variable declaration</div>	
<span style=" font-style: normal; font-weight: normal;">Does this compile successfully?<div align="left"><code><div><br /></div><div><div><div><div><div><div>import java.util.*;</div><div>public class Example {&nbsp;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static &lt;? super T&gt; List&lt;T&gt; foo(List&lt;? extends T&gt; input) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>List&lt;T&gt; output = new LinkedList&lt;T&gt;();</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>//do things</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>return output;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></div></div></div></code></div></span>	no<div><br /></div><div>wildcards cannot be used in the type declaration</div>	
Does this compile?<br><div align="left"><code><br><div><br /></div><div><div>interface Foo {&nbsp;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>void fooThing();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>void fooOtherThing(String s);</div><div>}</div><div>class Bar implements Foo {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public void fooThing() { }</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public void fooOtherThing(String s) { }</div><div>}</div></div><br></code></div>	yes	
<span style=" font-style: normal; font-weight: normal;">Does this compile?<div align="left"><code><div><br /></div><div><div><div>interface Foo {&nbsp;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>void fooThing();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>void fooOtherThing(String s);</div><div>}</div><div>class Bar implements Foo {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>void fooThing() { }</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>void fooOtherThing(String s) { }</div><div>}</div></div></div></code></div></span>	no<div><br /></div><div>the methods in Bar attempt to assign more restrictive access privileges.<br /><br />Methods declared in interfaces are always public</div>	
What is the result?<div><br /><div align="left"><br><code><br><div><div>import java.util.*;</div><div>public class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>String[] sa = {"ba", "a", "aa"};</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>Arrays.sort(sa);</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>for(String s: sa)</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("'"+ s + "' ");</div><div>&nbsp;&nbsp;}</div><div>}</div></div><br></code></div></div>	'a' 'aa' 'ba'	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div><div>import java.util.*;</div><div>public class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>String[] sa = {"z", " a", "aa"};</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>Arrays.sort(sa);</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>for(String s: sa)</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("'"+ s + "' ");</div><div>&nbsp;&nbsp;}</div><div>}</div></div></div></code></div></div></span>	' a' 'aa' 'z'	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><div align="left"><code><div><div>import java.util.*;</div><div>public class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>String[] sa = {"a", " z", "a "};</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>Arrays.sort(sa);</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>for(String s: sa)</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("'"+ s + "' ");</div><div>&nbsp;&nbsp;}</div><div>}</div></div></code></div></div></span>	' z' 'a' 'a '	
What is the result?<div><br /><code><div align="left"><br><div><div><div>import java.util.*;</div><div>public class Example {</div><div>&nbsp;&nbsp;public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>String[] sa = {" &nbsp;z", " a", " "};</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>Arrays.sort(sa);</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>for(String s: sa)</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>System.out.print("'"+ s + "' ");</div><div>&nbsp;&nbsp;}</div><div>}</div></div></div><br></div></code></div>	' ' ' &nbsp;z' ' a'	
Is this a valid interface?<br /><br /><br><code><br><div align="left"><div align="left"><div align="left">public interface Foo {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>public int a = 3;</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>int b = 8;</div><div align="left">}</div></div></div><br></code>	yes	
<span style=" font-style: normal; font-weight: normal;">Is this a valid interface?<br /><br /><code><div align="left"><div align="left"><div align="left"><div align="left">public interface Foo {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>protected int a = 3;</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>protected int b = 8;</div><div align="left">}</div></div></div></div></code></span>	no<div><br /></div><div>interface variables cannot be protected or private</div>	
<span style=" font-style: normal; font-weight: normal;">Is this a valid interface?<br /><br /><code><div align="left"><div align="left"><div align="left"><div align="left"><div align="left">public interface Foo {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>private int a = 3;</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>private int b = 8;</div><div align="left">}</div></div></div></div></div></code></span>	no<div><br /></div><div>interface variables cannot be protected or private</div>	
<span style=" font-style: normal; font-weight: normal;">Is this a valid interface?<br /><br /><code><div align="left"><div align="left"><div align="left"><div align="left"><div align="left"><div align="left"><div align="left">public interface Foo {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>public void doFoo();</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>void doBar(String s);</div><div align="left">}</div></div></div></div></div></div></div></code></span>	yes	
<span style=" font-style: normal; font-weight: normal;">Is this a valid interface?<br /><br /><code><div align="left"><div align="left"><div align="left"><div align="left"><div align="left"><div align="left"><div align="left"><div align="left">public interface Foo {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>public void doFoo();</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>static void doBar(String s);</div><div align="left">}</div></div></div></div></div></div></div></div></code></span>	no<div><br /></div><div>interface methods cannot be static or final</div>	
<span style=" font-style: normal; font-weight: normal;">Is this a valid interface?<br /><br /><code><div align="left"><div align="left"><div align="left"><div align="left"><div align="left"><div align="left"><div align="left"><div align="left">public interface Foo {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>void doFoo();</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>final void doBar(String s);</div><div align="left">}</div></div></div></div></div></div></div></div></code></span>	no<div><br /></div><div>interface methods cannot be final or static</div>	
Does this compile?<div><br /></div><br><code><div align="left"><div align="left">class Foo {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>int doThing(String s) {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>return 1;</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div align="left">}</div><div align="left">class Bar extends Foo {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>final int doThing(String s) {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>return 2;</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div align="left">}</div></div></code>	yes<div><br /></div><div>overriding methods can be final</div>	
<span style=" font-style: normal; font-weight: normal;">Does this compile?<div><br /></div><code><div align="left"><div align="left"><div align="left">class Foo {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>int doThing(String s) {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>return 1;</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div align="left">}</div><div align="left">class Bar extends Foo {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>protected int doThing(String s) {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>return 2;</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div align="left">}</div></div></div></code></span>	yes<div><br /></div><div>protected is less restrictive than default</div>	
<span style=" font-style: normal; font-weight: normal;">Does this compile?<div><br /></div><code><div align="left"><div align="left"><div align="left"><div align="left"><div align="left">class Foo {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>int doThing(String s) {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>return 1;</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div align="left">}</div><div align="left">class Bar extends Foo {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>private int doThing(float s) {</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>return 2;</div><div align="left"><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div align="left">}</div></div></div></div></div></code></span>	yes<div><br /></div><div>doThing() in Bar is an overloaded method, not an overriding method</div>	
What is the result?<div><br /><code><div align="left"><br><div>class Foo {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>static int y = 1;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>Foo(int x) { y = x; }</div><div>}</div><div>class Bar extends Foo {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>Bar() { y = 2; }</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>new Bar();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(y);</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div><br></div></code></div>	compilation fails<div><br /></div><div>Bar's constructor calls super(), which is not defined in Foo.</div>	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div><br /><code><div align="left"><div><div>class Foo {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>static int y = 1;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>Foo() { y = 1; }</div><div>}</div><div>class Bar extends Foo {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>Bar() { y = 2; }</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>new Bar();</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>System.out.println(y);</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>}</div><div>}</div></div></div></code></div></span>	2	
What is the result?<div>&nbsp;<br><div align="left"><code><div><div>public class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>static final short x = 0;</div><div><span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;static final int y = 2;&nbsp;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;for(int i=0; i &lt; 3; i++) {</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>switch(i) {</div><div>&nbsp;&nbsp; &nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;case y: System.out.print("0");</div><div>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>case y-1: System.out.print("1");</div><div>&nbsp;&nbsp; &nbsp; &nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>&nbsp;case x: System.out.print("2");</div><div>} } } }</div></div><br></code></div></div>	212012	
<span style=" font-style: normal; font-weight: normal;">What is the result?<div>&nbsp;<div align="left"><code><div><div><div>public class Example {</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>static short x = 0;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>static final int y = 2;&nbsp;</div><div>&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>public static void main(String[] args) {</div><div>&nbsp;&nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>for(int i=0; i &lt; 3; i++) {</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>switch(i) {</div><div>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>case y: System.out.print("0");</div><div>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>case y-1: System.out.print("1");</div><div>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<span class="Apple-tab-span" style="white-space:pre"> </span>case x: System.out.print("2");</div><div>} } } }</div></div></div></code></div></div></span>	compile error<div><br /></div><div>case expressions must be constant. x is not marked as final</div>	
It is appropriate to use assertions to check arguments in public methods. T/F	false	
<span style=" font-style: normal; font-weight: normal;">It is NOT appropriate to use assertions to check arguments in public methods. T/F</span>	true	
It is appropriate to have assertions that produce side effects when evaluated. T/F	false	
<span style=" font-style: normal; font-weight: normal;">It is NOT appropriate to have assertions that produce side effects when evaluated. T/F</span>	true	
When the wait() method is invoked on an object, the thread executing that code gives up its lock on the object immediately. T/F	true	
<span style=" font-style: normal; font-weight: normal;">When the wait() method is invoked on an object, the thread executing that code keeps the lock on the object until it exits the synchronized block. T/F</span>	false<div><br /></div><div>the thread releases the lock immediately</div>	